
examples/c/sapi/statecharts/5_application/out/5_application.elf:     file format elf32-littlearm
examples/c/sapi/statecharts/5_application/out/5_application.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000a7d

Program Header:
0x70000001 off    0x000121ec vaddr 0x1a0021ec paddr 0x1a0021ec align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000078 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000021f4 memsz 0x000021f4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0021f4 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a0021f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000078  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a0021e8  1a0021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0021ec  1a0021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  100000c0  100000c0  00020048  2**2
                  CONTENTS
 19 .debug_info   0001cdd7  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000408a  00000000  00000000  0003ce1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000082b7  00000000  00000000  00040ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000be0  00000000  00000000  00049160  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c20  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c8b0  00000000  00000000  0004a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00010b49  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002a150  00000000  00000000  00067d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00091ea9  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00091f11  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001d68  00000000  00000000  00091f44  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0021e8 l    d  .init_array	00000000 .init_array
1a0021ec l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000c0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Application.c
1a000300 l     F .text	00000014 clearInEvents
1a000314 l     F .text	00000004 check_TECX_DEBOUNCE_tr0_tr0
1a000318 l     F .text	00000004 check_TECX_NO_OPRIMIDO_tr0_tr0
1a00031c l     F .text	00000004 check_TECX_OPRIMIDO_tr0_tr0
1a000320 l     F .text	00000004 check_TECX_VALIDACION_tr0_tr0
1a000324 l     F .text	00000004 check_TECX_VALIDACION_tr1_tr1
1a000328 l     F .text	00000016 check_main_region_ESPERA_tr0_tr0
1a00033e l     F .text	00000016 check_main_region_ESPERA_tr1_tr1
1a000354 l     F .text	00000016 check_main_region_ESPERA_tr2_tr2
1a00036a l     F .text	00000016 check_main_region_ESPERA_tr3_tr3
1a000380 l     F .text	00000004 check_LED3_TITILA_tr0_tr0
1a000384 l     F .text	00000004 check_LED3_TITILA_r1_ENCENDIDO_tr0_tr0
1a000388 l     F .text	00000004 check_LED3_TITILA_r1_APAGADO_tr0_tr0
1a00038c l     F .text	00000004 check_LED3_REPOSO_tr0_tr0
1a000390 l     F .text	0000000a enact_TECX_OPRIMIDO
1a00039a l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a0003a4 l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a0003b6 l     F .text	0000000a enseq_TECX_VALIDACION_default
1a0003c0 l     F .text	0000000a enseq_main_region_ESPERA_default
1a0003ca l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a0003d2 l     F .text	00000008 exseq_TECX_OPRIMIDO
1a0003da l     F .text	00000010 effect_TECX_OPRIMIDO_tr0
1a0003ea l     F .text	00000008 exseq_TECX_VALIDACION
1a0003f2 l     F .text	00000010 effect_TECX_VALIDACION_tr0
1a000402 l     F .text	00000010 effect_TECX_VALIDACION_tr1
1a000412 l     F .text	0000000a exseq_main_region_ESPERA
1a00041c l     F .text	00000014 effect_main_region_ESPERA_tr0
1a000430 l     F .text	0000000a exseq_LED3_REPOSO
1a00043a l     F .text	00000014 react_TECX_OPRIMIDO
1a00044e l     F .text	00000024 react_TECX_VALIDACION
1a000472 l     F .text	00000008 react_TECX__entry_Default
1a00047a l     F .text	00000008 enseq_TECX_default
1a000482 l     F .text	00000008 react_main_region__entry_Default
1a00048a l     F .text	00000008 enseq_main_region_default
1a000492 l     F .text	0000000c enact_LED3_REPOSO
1a00049e l     F .text	00000012 enseq_LED3_REPOSO_default
1a0004b0 l     F .text	00000008 react_LED3__entry_Default
1a0004b8 l     F .text	00000008 enseq_LED3_default
1a0004c0 l     F .text	0000001a effect_main_region_ESPERA_tr1
1a0004da l     F .text	0000001a effect_main_region_ESPERA_tr2
1a0004f4 l     F .text	00000032 effect_main_region_ESPERA_tr3
1a000526 l     F .text	00000042 react_main_region_ESPERA
1a000568 l     F .text	0000000c exact_TECX_DEBOUNCE
1a000574 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a000582 l     F .text	00000010 effect_TECX_DEBOUNCE_tr0
1a000592 l     F .text	00000014 react_TECX_DEBOUNCE
1a0005a6 l     F .text	0000000c exact_LED3_TITILA_r1_ENCENDIDO
1a0005b2 l     F .text	00000010 exseq_LED3_TITILA_r1_ENCENDIDO
1a0005c2 l     F .text	0000000c exact_LED3_TITILA_r1_APAGADO
1a0005ce l     F .text	00000010 exseq_LED3_TITILA_r1_APAGADO
1a0005de l     F .text	0000001a exseq_LED3_TITILA_r1
1a0005f8 l     F .text	00000008 exseq_LED3_TITILA
1a000600 l     F .text	00000010 effect_LED3_TITILA_tr0
1a000610 l     F .text	00000010 enact_TECX_DEBOUNCE
1a000620 l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a000632 l     F .text	00000010 effect_TECX_NO_OPRIMIDO_tr0
1a000642 l     F .text	00000014 react_TECX_NO_OPRIMIDO
1a000656 l     F .text	0000001c enact_LED3_TITILA_r1_APAGADO
1a000672 l     F .text	00000012 enseq_LED3_TITILA_r1_APAGADO_default
1a000684 l     F .text	00000010 effect_LED3_TITILA_r1_ENCENDIDO_tr0
1a000694 l     F .text	00000024 react_LED3_TITILA_r1_ENCENDIDO
1a0006b8 l     F .text	00000008 react_LED3_TITILA_r1__entry_Default
1a0006c0 l     F .text	00000008 enseq_LED3_TITILA_r1_default
1a0006c8 l     F .text	00000008 enseq_LED3_TITILA_default
1a0006d0 l     F .text	00000010 effect_LED3_REPOSO_tr0
1a0006e0 l     F .text	00000014 react_LED3_REPOSO
1a0006f4 l     F .text	0000001e enact_LED3_TITILA_r1_ENCENDIDO
1a000712 l     F .text	00000012 enseq_LED3_TITILA_r1_ENCENDIDO_default
1a000724 l     F .text	00000010 effect_LED3_TITILA_r1_APAGADO_tr0
1a000734 l     F .text	00000024 react_LED3_TITILA_r1_APAGADO
00000000 l    df *ABS*	00000000 main.c
1000004c l     O .bss	0000001c statechart
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001f88 l     O .text	00000004 InitClkStates
1a001f8c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000bb8 l     F .text	00000044 Board_LED_Init
1a000bfc l     F .text	00000040 Board_TEC_Init
1a000c3c l     F .text	00000040 Board_GPIO_Init
1a000c7c l     F .text	00000030 Board_ADC_Init
1a000cac l     F .text	00000038 Board_SPI_Init
1a000ce4 l     F .text	00000024 Board_I2C_Init
1a002004 l     O .text	00000008 GpioButtons
1a00200c l     O .text	0000000c GpioLeds
1a002018 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000d64 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000d78 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000e98 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000eac l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002030 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0010cc l     F .text	000000a0 pll_calc_divs
1a00116c l     F .text	0000010c pll_get_frac
1a001278 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0014ec l     F .text	00000022 Chip_Clock_GetDivRate
10000068 l     O .bss	00000008 audio_usb_pll_freq
1a002084 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001658 l     F .text	0000002c Chip_UART_GetIndex
1a0020f0 l     O .text	00000008 UART_BClock
1a0020f8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001808 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000070 l     O .bss	00000004 callBackFuncParams
10000078 l     O .bss	00000008 tickCounter
10000080 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000084 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a0021ec l       .init_array	00000000 __init_array_end
1a0021e8 l       .bss_RAM5	00000000 __preinit_array_end
1a0021e8 l       .init_array	00000000 __init_array_start
1a0021e8 l       .bss_RAM5	00000000 __preinit_array_start
1a001310 g     F .text	0000001c Chip_Clock_GetDividerSource
10000048 g     O .bss	00000001 SysTick_Time_Flag
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a000778 g     F .text	00000016 application_enter
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000d5c g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000f52 g     F .text	0000000c Chip_ADC_SetResolution
1a001b70 g     F .text	0000002c SysTick_Handler
1a000a7a  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0021f4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6e12 g       *ABS*	00000000 __valid_user_code_checksum
1a0021f4 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000a36 g     F .text	00000044 UpdateTimers
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00158e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0009e4 g     F .text	0000002e IsPendEvent
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a000a12 g     F .text	00000024 MarkAsAttEvent
1a001c2c g     F .text	00000000 .hidden __aeabi_uldivmod
100000c0 g       .noinit	00000000 _noinit
1a000878 g     F .text	00000014 application_unsetTimer
100000b8 g     O .bss	00000004 SystemCoreClock
1a001684 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a00160c g     F .text	0000004c Chip_Clock_GetRate
1a000840 g     F .text	0000000c myTickHook
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b40 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001c5c g     F .text	000002d0 .hidden __udivmoddi4
1a002000 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0021ec g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001f30 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000d2c g     F .text	00000030 Board_Init
1a000b06  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000820 g     F .text	00000012 application_raiseTimeEvent
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1a000832 g     F .text	00000006 applicationIface_raise_evTECXNoOprimido
100000c0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000a7c g     F .text	00000088 Reset_Handler
1a00084c g     F .text	00000010 applicationIface_opLED
1a001af4 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000e5c g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0012c4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000e38 g     F .text	00000024 Chip_I2C_Init
1a00097e g     F .text	00000032 SetNewTimerTick
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001480 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002100 g     O .text	000000e6 gpioPinsInit
1a000d90 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001568 g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000f20 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000da2 g     F .text	0000003e Chip_SSP_SetBitRate
1a000e94 g     F .text	00000002 Chip_GPIO_Init
1a00202c g     O .text	00000004 OscRateIn
100000c0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00085c g     F .text	0000001c application_setTimer
1a000178 g       .text	00000000 __bss_section_table_end
1a00183c g     F .text	000001ac gpioInit
1a001f2c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001b9c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00132c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001f78 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0008b8 g     F .text	000000a4 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0009b0 g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00159c g     F .text	0000003c Chip_Clock_EnableOpts
1a001348 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001400 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0017b4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0019e8 g     F .text	0000006a gpioWrite
1a000b04  w    F .text	00000002 _fini
1a000ee0 g     F .text	00000040 Chip_ADC_Init
100000bc g     O .bss	00000004 g_pUsbApi
1a000b08 g     F .text	00000038 Board_SetupMuxing
1a00088c g     F .text	0000002a Buttons_GetStatus_
1a0016d8 g     F .text	000000dc Chip_UART_SetBaudFDR
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000088 g     O .bss	00000030 ticks
1b000000 g       .text	00000000 __core_m0app_START__
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00095c g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a001abc g     F .text	00000020 tickCallbackSet
100000c0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000de0 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000d08 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a000e18 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000f60 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0010b8 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001f2c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000838 g     F .text	00000008 applicationIface_raise_evTECXOprimido
1a0015d8 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001a52 g     F .text	00000068 gpioRead
1a001bb8 g     F .text	00000074 boardInit
1a000758 g     F .text	00000020 application_init
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000790 g     F .text	00000090 application_runCycle
1a001adc g     F .text	00000018 tickPowerSet
1a001510 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0017ec g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000bac g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 7d 0a 00 1a 79 01 00 1a 7b 01 00 1a     ....}...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 12 6e ff 53     }............n.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	71 1b 00 1a                                         q...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	9d 1b 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0021f4 	.word	0x1a0021f4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a0021f4 	.word	0x1a0021f4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0021f4 	.word	0x1a0021f4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0021f4 	.word	0x1a0021f4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0021f4 	.word	0x1a0021f4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000078 	.word	0x00000078
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(Application* handle)
{
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evTECXOprimido_raised = bool_false;
1a000304:	7243      	strb	r3, [r0, #9]
	handle->internal.siTitilarLED_raised = bool_false;
1a000306:	7403      	strb	r3, [r0, #16]
	handle->internal.siNoTitilarLED_raised = bool_false;
1a000308:	7443      	strb	r3, [r0, #17]
	handle->internal.siTECXOK_raised = bool_false;
1a00030a:	7483      	strb	r3, [r0, #18]
	handle->timeEvents.application_TECX_DEBOUNCE_tev0_raised = bool_false;
1a00030c:	7603      	strb	r3, [r0, #24]
	handle->timeEvents.application_LED3_TITILA_r1_ENCENDIDO_tev0_raised = bool_false;
1a00030e:	7643      	strb	r3, [r0, #25]
	handle->timeEvents.application_LED3_TITILA_r1_APAGADO_tev0_raised = bool_false;
1a000310:	7683      	strb	r3, [r0, #26]
}
1a000312:	4770      	bx	lr

1a000314 <check_TECX_DEBOUNCE_tr0_tr0>:
/* implementations of all internal functions */

static sc_boolean check_TECX_DEBOUNCE_tr0_tr0(const Application* handle)
{
	return handle->timeEvents.application_TECX_DEBOUNCE_tev0_raised;
}
1a000314:	7e00      	ldrb	r0, [r0, #24]
1a000316:	4770      	bx	lr

1a000318 <check_TECX_NO_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_NO_OPRIMIDO_tr0_tr0(const Application* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000318:	7a40      	ldrb	r0, [r0, #9]
1a00031a:	4770      	bx	lr

1a00031c <check_TECX_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_OPRIMIDO_tr0_tr0(const Application* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a00031c:	7a00      	ldrb	r0, [r0, #8]
1a00031e:	4770      	bx	lr

1a000320 <check_TECX_VALIDACION_tr0_tr0>:

static sc_boolean check_TECX_VALIDACION_tr0_tr0(const Application* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000320:	7a40      	ldrb	r0, [r0, #9]
1a000322:	4770      	bx	lr

1a000324 <check_TECX_VALIDACION_tr1_tr1>:

static sc_boolean check_TECX_VALIDACION_tr1_tr1(const Application* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a000324:	7a00      	ldrb	r0, [r0, #8]
1a000326:	4770      	bx	lr

1a000328 <check_main_region_ESPERA_tr0_tr0>:

static sc_boolean check_main_region_ESPERA_tr0_tr0(const Application* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == APPLICATION_APPLICATIONIFACE_TEC4)) ? bool_true : bool_false;
1a000328:	7c83      	ldrb	r3, [r0, #18]
1a00032a:	b123      	cbz	r3, 1a000336 <check_main_region_ESPERA_tr0_tr0+0xe>
1a00032c:	6943      	ldr	r3, [r0, #20]
1a00032e:	2b08      	cmp	r3, #8
1a000330:	d003      	beq.n	1a00033a <check_main_region_ESPERA_tr0_tr0+0x12>
1a000332:	2000      	movs	r0, #0
1a000334:	4770      	bx	lr
1a000336:	2000      	movs	r0, #0
1a000338:	4770      	bx	lr
1a00033a:	2001      	movs	r0, #1
}
1a00033c:	4770      	bx	lr

1a00033e <check_main_region_ESPERA_tr1_tr1>:

static sc_boolean check_main_region_ESPERA_tr1_tr1(const Application* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == APPLICATION_APPLICATIONIFACE_TEC3)) ? bool_true : bool_false;
1a00033e:	7c83      	ldrb	r3, [r0, #18]
1a000340:	b123      	cbz	r3, 1a00034c <check_main_region_ESPERA_tr1_tr1+0xe>
1a000342:	6943      	ldr	r3, [r0, #20]
1a000344:	2b04      	cmp	r3, #4
1a000346:	d003      	beq.n	1a000350 <check_main_region_ESPERA_tr1_tr1+0x12>
1a000348:	2000      	movs	r0, #0
1a00034a:	4770      	bx	lr
1a00034c:	2000      	movs	r0, #0
1a00034e:	4770      	bx	lr
1a000350:	2001      	movs	r0, #1
}
1a000352:	4770      	bx	lr

1a000354 <check_main_region_ESPERA_tr2_tr2>:

static sc_boolean check_main_region_ESPERA_tr2_tr2(const Application* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == APPLICATION_APPLICATIONIFACE_TEC2)) ? bool_true : bool_false;
1a000354:	7c83      	ldrb	r3, [r0, #18]
1a000356:	b123      	cbz	r3, 1a000362 <check_main_region_ESPERA_tr2_tr2+0xe>
1a000358:	6943      	ldr	r3, [r0, #20]
1a00035a:	2b02      	cmp	r3, #2
1a00035c:	d003      	beq.n	1a000366 <check_main_region_ESPERA_tr2_tr2+0x12>
1a00035e:	2000      	movs	r0, #0
1a000360:	4770      	bx	lr
1a000362:	2000      	movs	r0, #0
1a000364:	4770      	bx	lr
1a000366:	2001      	movs	r0, #1
}
1a000368:	4770      	bx	lr

1a00036a <check_main_region_ESPERA_tr3_tr3>:

static sc_boolean check_main_region_ESPERA_tr3_tr3(const Application* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == APPLICATION_APPLICATIONIFACE_TEC1)) ? bool_true : bool_false;
1a00036a:	7c83      	ldrb	r3, [r0, #18]
1a00036c:	b123      	cbz	r3, 1a000378 <check_main_region_ESPERA_tr3_tr3+0xe>
1a00036e:	6943      	ldr	r3, [r0, #20]
1a000370:	2b01      	cmp	r3, #1
1a000372:	d003      	beq.n	1a00037c <check_main_region_ESPERA_tr3_tr3+0x12>
1a000374:	2000      	movs	r0, #0
1a000376:	4770      	bx	lr
1a000378:	2000      	movs	r0, #0
1a00037a:	4770      	bx	lr
1a00037c:	2001      	movs	r0, #1
}
1a00037e:	4770      	bx	lr

1a000380 <check_LED3_TITILA_tr0_tr0>:

static sc_boolean check_LED3_TITILA_tr0_tr0(const Application* handle)
{
	return handle->internal.siNoTitilarLED_raised;
}
1a000380:	7c40      	ldrb	r0, [r0, #17]
1a000382:	4770      	bx	lr

1a000384 <check_LED3_TITILA_r1_ENCENDIDO_tr0_tr0>:

static sc_boolean check_LED3_TITILA_r1_ENCENDIDO_tr0_tr0(const Application* handle)
{
	return handle->timeEvents.application_LED3_TITILA_r1_ENCENDIDO_tev0_raised;
}
1a000384:	7e40      	ldrb	r0, [r0, #25]
1a000386:	4770      	bx	lr

1a000388 <check_LED3_TITILA_r1_APAGADO_tr0_tr0>:

static sc_boolean check_LED3_TITILA_r1_APAGADO_tr0_tr0(const Application* handle)
{
	return handle->timeEvents.application_LED3_TITILA_r1_APAGADO_tev0_raised;
}
1a000388:	7e80      	ldrb	r0, [r0, #26]
1a00038a:	4770      	bx	lr

1a00038c <check_LED3_REPOSO_tr0_tr0>:

static sc_boolean check_LED3_REPOSO_tr0_tr0(const Application* handle)
{
	return handle->internal.siTitilarLED_raised;
}
1a00038c:	7c00      	ldrb	r0, [r0, #16]
1a00038e:	4770      	bx	lr

1a000390 <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(Application* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a000390:	2301      	movs	r3, #1
1a000392:	7483      	strb	r3, [r0, #18]
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a000394:	68c3      	ldr	r3, [r0, #12]
1a000396:	6143      	str	r3, [r0, #20]
}
1a000398:	4770      	bx	lr

1a00039a <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(Application* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Application_TECX_NO_OPRIMIDO;
1a00039a:	2302      	movs	r3, #2
1a00039c:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00039e:	2300      	movs	r3, #0
1a0003a0:	6043      	str	r3, [r0, #4]
}
1a0003a2:	4770      	bx	lr

1a0003a4 <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(Application* handle)
{
1a0003a4:	b510      	push	{r4, lr}
1a0003a6:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a0003a8:	f7ff fff2 	bl	1a000390 <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = Application_TECX_OPRIMIDO;
1a0003ac:	2303      	movs	r3, #3
1a0003ae:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0003b0:	2300      	movs	r3, #0
1a0003b2:	6063      	str	r3, [r4, #4]
}
1a0003b4:	bd10      	pop	{r4, pc}

1a0003b6 <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(Application* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = Application_TECX_VALIDACION;
1a0003b6:	2304      	movs	r3, #4
1a0003b8:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003ba:	2300      	movs	r3, #0
1a0003bc:	6043      	str	r3, [r0, #4]
}
1a0003be:	4770      	bx	lr

1a0003c0 <enseq_main_region_ESPERA_default>:

/* 'default' enter sequence for state ESPERA */
static void enseq_main_region_ESPERA_default(Application* handle)
{
	/* 'default' enter sequence for state ESPERA */
	handle->stateConfVector[1] = Application_main_region_ESPERA;
1a0003c0:	2305      	movs	r3, #5
1a0003c2:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0003c4:	2301      	movs	r3, #1
1a0003c6:	6043      	str	r3, [r0, #4]
}
1a0003c8:	4770      	bx	lr

1a0003ca <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(Application* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Application_last_state;
1a0003ca:	2300      	movs	r3, #0
1a0003cc:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003ce:	6043      	str	r3, [r0, #4]
}
1a0003d0:	4770      	bx	lr

1a0003d2 <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(Application* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = Application_last_state;
1a0003d2:	2300      	movs	r3, #0
1a0003d4:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003d6:	6043      	str	r3, [r0, #4]
}
1a0003d8:	4770      	bx	lr

1a0003da <effect_TECX_OPRIMIDO_tr0>:
{
1a0003da:	b510      	push	{r4, lr}
1a0003dc:	4604      	mov	r4, r0
	exseq_TECX_OPRIMIDO(handle);
1a0003de:	f7ff fff8 	bl	1a0003d2 <exseq_TECX_OPRIMIDO>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003e2:	4620      	mov	r0, r4
1a0003e4:	f7ff ffd9 	bl	1a00039a <enseq_TECX_NO_OPRIMIDO_default>
}
1a0003e8:	bd10      	pop	{r4, pc}

1a0003ea <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(Application* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = Application_last_state;
1a0003ea:	2300      	movs	r3, #0
1a0003ec:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0003ee:	6043      	str	r3, [r0, #4]
}
1a0003f0:	4770      	bx	lr

1a0003f2 <effect_TECX_VALIDACION_tr0>:
{
1a0003f2:	b510      	push	{r4, lr}
1a0003f4:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a0003f6:	f7ff fff8 	bl	1a0003ea <exseq_TECX_VALIDACION>
	enseq_TECX_OPRIMIDO_default(handle);
1a0003fa:	4620      	mov	r0, r4
1a0003fc:	f7ff ffd2 	bl	1a0003a4 <enseq_TECX_OPRIMIDO_default>
}
1a000400:	bd10      	pop	{r4, pc}

1a000402 <effect_TECX_VALIDACION_tr1>:
{
1a000402:	b510      	push	{r4, lr}
1a000404:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a000406:	f7ff fff0 	bl	1a0003ea <exseq_TECX_VALIDACION>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a00040a:	4620      	mov	r0, r4
1a00040c:	f7ff ffc5 	bl	1a00039a <enseq_TECX_NO_OPRIMIDO_default>
}
1a000410:	bd10      	pop	{r4, pc}

1a000412 <exseq_main_region_ESPERA>:

/* Default exit sequence for state ESPERA */
static void exseq_main_region_ESPERA(Application* handle)
{
	/* Default exit sequence for state ESPERA */
	handle->stateConfVector[1] = Application_last_state;
1a000412:	2300      	movs	r3, #0
1a000414:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000416:	2301      	movs	r3, #1
1a000418:	6043      	str	r3, [r0, #4]
}
1a00041a:	4770      	bx	lr

1a00041c <effect_main_region_ESPERA_tr0>:
{
1a00041c:	b510      	push	{r4, lr}
1a00041e:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a000420:	f7ff fff7 	bl	1a000412 <exseq_main_region_ESPERA>
	handle->internal.siTitilarLED_raised = bool_true;
1a000424:	2301      	movs	r3, #1
1a000426:	7423      	strb	r3, [r4, #16]
	enseq_main_region_ESPERA_default(handle);
1a000428:	4620      	mov	r0, r4
1a00042a:	f7ff ffc9 	bl	1a0003c0 <enseq_main_region_ESPERA_default>
}
1a00042e:	bd10      	pop	{r4, pc}

1a000430 <exseq_LED3_REPOSO>:

/* Default exit sequence for state REPOSO */
static void exseq_LED3_REPOSO(Application* handle)
{
	/* Default exit sequence for state REPOSO */
	handle->stateConfVector[2] = Application_last_state;
1a000430:	2300      	movs	r3, #0
1a000432:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000434:	2302      	movs	r3, #2
1a000436:	6043      	str	r3, [r0, #4]
}
1a000438:	4770      	bx	lr

1a00043a <react_TECX_OPRIMIDO>:
	} 
}

/* The reactions of state OPRIMIDO. */
static void react_TECX_OPRIMIDO(Application* handle)
{
1a00043a:	b510      	push	{r4, lr}
1a00043c:	4604      	mov	r4, r0
	/* The reactions of state OPRIMIDO. */
	if (check_TECX_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a00043e:	f7ff ff6d 	bl	1a00031c <check_TECX_OPRIMIDO_tr0_tr0>
1a000442:	b900      	cbnz	r0, 1a000446 <react_TECX_OPRIMIDO+0xc>
	{ 
		effect_TECX_OPRIMIDO_tr0(handle);
	} 
}
1a000444:	bd10      	pop	{r4, pc}
		effect_TECX_OPRIMIDO_tr0(handle);
1a000446:	4620      	mov	r0, r4
1a000448:	f7ff ffc7 	bl	1a0003da <effect_TECX_OPRIMIDO_tr0>
}
1a00044c:	e7fa      	b.n	1a000444 <react_TECX_OPRIMIDO+0xa>

1a00044e <react_TECX_VALIDACION>:

/* The reactions of state VALIDACION. */
static void react_TECX_VALIDACION(Application* handle)
{
1a00044e:	b510      	push	{r4, lr}
1a000450:	4604      	mov	r4, r0
	/* The reactions of state VALIDACION. */
	if (check_TECX_VALIDACION_tr0_tr0(handle) == bool_true)
1a000452:	f7ff ff65 	bl	1a000320 <check_TECX_VALIDACION_tr0_tr0>
1a000456:	b920      	cbnz	r0, 1a000462 <react_TECX_VALIDACION+0x14>
	{ 
		effect_TECX_VALIDACION_tr0(handle);
	}  else
	{
		if (check_TECX_VALIDACION_tr1_tr1(handle) == bool_true)
1a000458:	4620      	mov	r0, r4
1a00045a:	f7ff ff63 	bl	1a000324 <check_TECX_VALIDACION_tr1_tr1>
1a00045e:	b920      	cbnz	r0, 1a00046a <react_TECX_VALIDACION+0x1c>
		{ 
			effect_TECX_VALIDACION_tr1(handle);
		} 
	}
}
1a000460:	bd10      	pop	{r4, pc}
		effect_TECX_VALIDACION_tr0(handle);
1a000462:	4620      	mov	r0, r4
1a000464:	f7ff ffc5 	bl	1a0003f2 <effect_TECX_VALIDACION_tr0>
1a000468:	e7fa      	b.n	1a000460 <react_TECX_VALIDACION+0x12>
			effect_TECX_VALIDACION_tr1(handle);
1a00046a:	4620      	mov	r0, r4
1a00046c:	f7ff ffc9 	bl	1a000402 <effect_TECX_VALIDACION_tr1>
}
1a000470:	e7f6      	b.n	1a000460 <react_TECX_VALIDACION+0x12>

1a000472 <react_TECX__entry_Default>:
	} 
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(Application* handle)
{
1a000472:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a000474:	f7ff ff91 	bl	1a00039a <enseq_TECX_NO_OPRIMIDO_default>
}
1a000478:	bd08      	pop	{r3, pc}

1a00047a <enseq_TECX_default>:
{
1a00047a:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a00047c:	f7ff fff9 	bl	1a000472 <react_TECX__entry_Default>
}
1a000480:	bd08      	pop	{r3, pc}

1a000482 <react_main_region__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(Application* handle)
{
1a000482:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_main_region_ESPERA_default(handle);
1a000484:	f7ff ff9c 	bl	1a0003c0 <enseq_main_region_ESPERA_default>
}
1a000488:	bd08      	pop	{r3, pc}

1a00048a <enseq_main_region_default>:
{
1a00048a:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a00048c:	f7ff fff9 	bl	1a000482 <react_main_region__entry_Default>
}
1a000490:	bd08      	pop	{r3, pc}

1a000492 <enact_LED3_REPOSO>:
{
1a000492:	b508      	push	{r3, lr}
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED3, APPLICATION_APPLICATIONIFACE_LED_OFF);
1a000494:	2200      	movs	r2, #0
1a000496:	2105      	movs	r1, #5
1a000498:	f000 f9d8 	bl	1a00084c <applicationIface_opLED>
}
1a00049c:	bd08      	pop	{r3, pc}

1a00049e <enseq_LED3_REPOSO_default>:
{
1a00049e:	b510      	push	{r4, lr}
1a0004a0:	4604      	mov	r4, r0
	enact_LED3_REPOSO(handle);
1a0004a2:	f7ff fff6 	bl	1a000492 <enact_LED3_REPOSO>
	handle->stateConfVector[2] = Application_LED3_REPOSO;
1a0004a6:	2309      	movs	r3, #9
1a0004a8:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0004aa:	2302      	movs	r3, #2
1a0004ac:	6063      	str	r3, [r4, #4]
}
1a0004ae:	bd10      	pop	{r4, pc}

1a0004b0 <react_LED3__entry_Default>:
	enseq_LED3_TITILA_r1_APAGADO_default(handle);
}

/* Default react sequence for initial entry  */
static void react_LED3__entry_Default(Application* handle)
{
1a0004b0:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_LED3_REPOSO_default(handle);
1a0004b2:	f7ff fff4 	bl	1a00049e <enseq_LED3_REPOSO_default>
}
1a0004b6:	bd08      	pop	{r3, pc}

1a0004b8 <enseq_LED3_default>:
{
1a0004b8:	b508      	push	{r3, lr}
	react_LED3__entry_Default(handle);
1a0004ba:	f7ff fff9 	bl	1a0004b0 <react_LED3__entry_Default>
}
1a0004be:	bd08      	pop	{r3, pc}

1a0004c0 <effect_main_region_ESPERA_tr1>:
{
1a0004c0:	b510      	push	{r4, lr}
1a0004c2:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a0004c4:	f7ff ffa5 	bl	1a000412 <exseq_main_region_ESPERA>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED2, APPLICATION_APPLICATIONIFACE_LED_ON);
1a0004c8:	2201      	movs	r2, #1
1a0004ca:	2104      	movs	r1, #4
1a0004cc:	4620      	mov	r0, r4
1a0004ce:	f000 f9bd 	bl	1a00084c <applicationIface_opLED>
	enseq_main_region_ESPERA_default(handle);
1a0004d2:	4620      	mov	r0, r4
1a0004d4:	f7ff ff74 	bl	1a0003c0 <enseq_main_region_ESPERA_default>
}
1a0004d8:	bd10      	pop	{r4, pc}

1a0004da <effect_main_region_ESPERA_tr2>:
{
1a0004da:	b510      	push	{r4, lr}
1a0004dc:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a0004de:	f7ff ff98 	bl	1a000412 <exseq_main_region_ESPERA>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED1, APPLICATION_APPLICATIONIFACE_LED_ON);
1a0004e2:	2201      	movs	r2, #1
1a0004e4:	2103      	movs	r1, #3
1a0004e6:	4620      	mov	r0, r4
1a0004e8:	f000 f9b0 	bl	1a00084c <applicationIface_opLED>
	enseq_main_region_ESPERA_default(handle);
1a0004ec:	4620      	mov	r0, r4
1a0004ee:	f7ff ff67 	bl	1a0003c0 <enseq_main_region_ESPERA_default>
}
1a0004f2:	bd10      	pop	{r4, pc}

1a0004f4 <effect_main_region_ESPERA_tr3>:
{
1a0004f4:	b510      	push	{r4, lr}
1a0004f6:	4604      	mov	r4, r0
	exseq_main_region_ESPERA(handle);
1a0004f8:	f7ff ff8b 	bl	1a000412 <exseq_main_region_ESPERA>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED1, APPLICATION_APPLICATIONIFACE_LED_OFF);
1a0004fc:	2200      	movs	r2, #0
1a0004fe:	2103      	movs	r1, #3
1a000500:	4620      	mov	r0, r4
1a000502:	f000 f9a3 	bl	1a00084c <applicationIface_opLED>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED2, APPLICATION_APPLICATIONIFACE_LED_OFF);
1a000506:	2200      	movs	r2, #0
1a000508:	2104      	movs	r1, #4
1a00050a:	4620      	mov	r0, r4
1a00050c:	f000 f99e 	bl	1a00084c <applicationIface_opLED>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED3, APPLICATION_APPLICATIONIFACE_LED_OFF);
1a000510:	2200      	movs	r2, #0
1a000512:	2105      	movs	r1, #5
1a000514:	4620      	mov	r0, r4
1a000516:	f000 f999 	bl	1a00084c <applicationIface_opLED>
	handle->internal.siNoTitilarLED_raised = bool_true;
1a00051a:	2301      	movs	r3, #1
1a00051c:	7463      	strb	r3, [r4, #17]
	enseq_main_region_ESPERA_default(handle);
1a00051e:	4620      	mov	r0, r4
1a000520:	f7ff ff4e 	bl	1a0003c0 <enseq_main_region_ESPERA_default>
}
1a000524:	bd10      	pop	{r4, pc}

1a000526 <react_main_region_ESPERA>:
{
1a000526:	b510      	push	{r4, lr}
1a000528:	4604      	mov	r4, r0
	if (check_main_region_ESPERA_tr0_tr0(handle) == bool_true)
1a00052a:	f7ff fefd 	bl	1a000328 <check_main_region_ESPERA_tr0_tr0>
1a00052e:	b978      	cbnz	r0, 1a000550 <react_main_region_ESPERA+0x2a>
		if (check_main_region_ESPERA_tr1_tr1(handle) == bool_true)
1a000530:	4620      	mov	r0, r4
1a000532:	f7ff ff04 	bl	1a00033e <check_main_region_ESPERA_tr1_tr1>
1a000536:	b978      	cbnz	r0, 1a000558 <react_main_region_ESPERA+0x32>
			if (check_main_region_ESPERA_tr2_tr2(handle) == bool_true)
1a000538:	4620      	mov	r0, r4
1a00053a:	f7ff ff0b 	bl	1a000354 <check_main_region_ESPERA_tr2_tr2>
1a00053e:	b978      	cbnz	r0, 1a000560 <react_main_region_ESPERA+0x3a>
				if (check_main_region_ESPERA_tr3_tr3(handle) == bool_true)
1a000540:	4620      	mov	r0, r4
1a000542:	f7ff ff12 	bl	1a00036a <check_main_region_ESPERA_tr3_tr3>
1a000546:	b130      	cbz	r0, 1a000556 <react_main_region_ESPERA+0x30>
					effect_main_region_ESPERA_tr3(handle);
1a000548:	4620      	mov	r0, r4
1a00054a:	f7ff ffd3 	bl	1a0004f4 <effect_main_region_ESPERA_tr3>
}
1a00054e:	e002      	b.n	1a000556 <react_main_region_ESPERA+0x30>
		effect_main_region_ESPERA_tr0(handle);
1a000550:	4620      	mov	r0, r4
1a000552:	f7ff ff63 	bl	1a00041c <effect_main_region_ESPERA_tr0>
}
1a000556:	bd10      	pop	{r4, pc}
			effect_main_region_ESPERA_tr1(handle);
1a000558:	4620      	mov	r0, r4
1a00055a:	f7ff ffb1 	bl	1a0004c0 <effect_main_region_ESPERA_tr1>
1a00055e:	e7fa      	b.n	1a000556 <react_main_region_ESPERA+0x30>
				effect_main_region_ESPERA_tr2(handle);
1a000560:	4620      	mov	r0, r4
1a000562:	f7ff ffba 	bl	1a0004da <effect_main_region_ESPERA_tr2>
1a000566:	e7f6      	b.n	1a000556 <react_main_region_ESPERA+0x30>

1a000568 <exact_TECX_DEBOUNCE>:
{
1a000568:	b508      	push	{r3, lr}
	application_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.application_TECX_DEBOUNCE_tev0_raised) );		
1a00056a:	f100 0118 	add.w	r1, r0, #24
1a00056e:	f000 f983 	bl	1a000878 <application_unsetTimer>
}
1a000572:	bd08      	pop	{r3, pc}

1a000574 <exseq_TECX_DEBOUNCE>:
{
1a000574:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Application_last_state;
1a000576:	2200      	movs	r2, #0
1a000578:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00057a:	6042      	str	r2, [r0, #4]
	exact_TECX_DEBOUNCE(handle);
1a00057c:	f7ff fff4 	bl	1a000568 <exact_TECX_DEBOUNCE>
}
1a000580:	bd08      	pop	{r3, pc}

1a000582 <effect_TECX_DEBOUNCE_tr0>:
{
1a000582:	b510      	push	{r4, lr}
1a000584:	4604      	mov	r4, r0
	exseq_TECX_DEBOUNCE(handle);
1a000586:	f7ff fff5 	bl	1a000574 <exseq_TECX_DEBOUNCE>
	enseq_TECX_VALIDACION_default(handle);
1a00058a:	4620      	mov	r0, r4
1a00058c:	f7ff ff13 	bl	1a0003b6 <enseq_TECX_VALIDACION_default>
}
1a000590:	bd10      	pop	{r4, pc}

1a000592 <react_TECX_DEBOUNCE>:
{
1a000592:	b510      	push	{r4, lr}
1a000594:	4604      	mov	r4, r0
	if (check_TECX_DEBOUNCE_tr0_tr0(handle) == bool_true)
1a000596:	f7ff febd 	bl	1a000314 <check_TECX_DEBOUNCE_tr0_tr0>
1a00059a:	b900      	cbnz	r0, 1a00059e <react_TECX_DEBOUNCE+0xc>
}
1a00059c:	bd10      	pop	{r4, pc}
		effect_TECX_DEBOUNCE_tr0(handle);
1a00059e:	4620      	mov	r0, r4
1a0005a0:	f7ff ffef 	bl	1a000582 <effect_TECX_DEBOUNCE_tr0>
}
1a0005a4:	e7fa      	b.n	1a00059c <react_TECX_DEBOUNCE+0xa>

1a0005a6 <exact_LED3_TITILA_r1_ENCENDIDO>:
{
1a0005a6:	b508      	push	{r3, lr}
	application_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.application_LED3_TITILA_r1_ENCENDIDO_tev0_raised) );		
1a0005a8:	f100 0119 	add.w	r1, r0, #25
1a0005ac:	f000 f964 	bl	1a000878 <application_unsetTimer>
}
1a0005b0:	bd08      	pop	{r3, pc}

1a0005b2 <exseq_LED3_TITILA_r1_ENCENDIDO>:
{
1a0005b2:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Application_last_state;
1a0005b4:	2200      	movs	r2, #0
1a0005b6:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0005b8:	2202      	movs	r2, #2
1a0005ba:	6042      	str	r2, [r0, #4]
	exact_LED3_TITILA_r1_ENCENDIDO(handle);
1a0005bc:	f7ff fff3 	bl	1a0005a6 <exact_LED3_TITILA_r1_ENCENDIDO>
}
1a0005c0:	bd08      	pop	{r3, pc}

1a0005c2 <exact_LED3_TITILA_r1_APAGADO>:
{
1a0005c2:	b508      	push	{r3, lr}
	application_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.application_LED3_TITILA_r1_APAGADO_tev0_raised) );		
1a0005c4:	f100 011a 	add.w	r1, r0, #26
1a0005c8:	f000 f956 	bl	1a000878 <application_unsetTimer>
}
1a0005cc:	bd08      	pop	{r3, pc}

1a0005ce <exseq_LED3_TITILA_r1_APAGADO>:
{
1a0005ce:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Application_last_state;
1a0005d0:	2200      	movs	r2, #0
1a0005d2:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0005d4:	2202      	movs	r2, #2
1a0005d6:	6042      	str	r2, [r0, #4]
	exact_LED3_TITILA_r1_APAGADO(handle);
1a0005d8:	f7ff fff3 	bl	1a0005c2 <exact_LED3_TITILA_r1_APAGADO>
}
1a0005dc:	bd08      	pop	{r3, pc}

1a0005de <exseq_LED3_TITILA_r1>:
{
1a0005de:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 2 ])
1a0005e0:	7883      	ldrb	r3, [r0, #2]
1a0005e2:	2b07      	cmp	r3, #7
1a0005e4:	d002      	beq.n	1a0005ec <exseq_LED3_TITILA_r1+0xe>
1a0005e6:	2b08      	cmp	r3, #8
1a0005e8:	d003      	beq.n	1a0005f2 <exseq_LED3_TITILA_r1+0x14>
}
1a0005ea:	bd08      	pop	{r3, pc}
			exseq_LED3_TITILA_r1_ENCENDIDO(handle);
1a0005ec:	f7ff ffe1 	bl	1a0005b2 <exseq_LED3_TITILA_r1_ENCENDIDO>
			break;
1a0005f0:	e7fb      	b.n	1a0005ea <exseq_LED3_TITILA_r1+0xc>
			exseq_LED3_TITILA_r1_APAGADO(handle);
1a0005f2:	f7ff ffec 	bl	1a0005ce <exseq_LED3_TITILA_r1_APAGADO>
}
1a0005f6:	e7f8      	b.n	1a0005ea <exseq_LED3_TITILA_r1+0xc>

1a0005f8 <exseq_LED3_TITILA>:
{
1a0005f8:	b508      	push	{r3, lr}
	exseq_LED3_TITILA_r1(handle);
1a0005fa:	f7ff fff0 	bl	1a0005de <exseq_LED3_TITILA_r1>
}
1a0005fe:	bd08      	pop	{r3, pc}

1a000600 <effect_LED3_TITILA_tr0>:
{
1a000600:	b510      	push	{r4, lr}
1a000602:	4604      	mov	r4, r0
	exseq_LED3_TITILA(handle);
1a000604:	f7ff fff8 	bl	1a0005f8 <exseq_LED3_TITILA>
	enseq_LED3_REPOSO_default(handle);
1a000608:	4620      	mov	r0, r4
1a00060a:	f7ff ff48 	bl	1a00049e <enseq_LED3_REPOSO_default>
}
1a00060e:	bd10      	pop	{r4, pc}

1a000610 <enact_TECX_DEBOUNCE>:
{
1a000610:	b508      	push	{r3, lr}
	application_setTimer(handle, (sc_eventid) &(handle->timeEvents.application_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a000612:	2300      	movs	r3, #0
1a000614:	2264      	movs	r2, #100	; 0x64
1a000616:	f100 0118 	add.w	r1, r0, #24
1a00061a:	f000 f91f 	bl	1a00085c <application_setTimer>
}
1a00061e:	bd08      	pop	{r3, pc}

1a000620 <enseq_TECX_DEBOUNCE_default>:
{
1a000620:	b510      	push	{r4, lr}
1a000622:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a000624:	f7ff fff4 	bl	1a000610 <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = Application_TECX_DEBOUNCE;
1a000628:	2301      	movs	r3, #1
1a00062a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00062c:	2300      	movs	r3, #0
1a00062e:	6063      	str	r3, [r4, #4]
}
1a000630:	bd10      	pop	{r4, pc}

1a000632 <effect_TECX_NO_OPRIMIDO_tr0>:
{
1a000632:	b510      	push	{r4, lr}
1a000634:	4604      	mov	r4, r0
	exseq_TECX_NO_OPRIMIDO(handle);
1a000636:	f7ff fec8 	bl	1a0003ca <exseq_TECX_NO_OPRIMIDO>
	enseq_TECX_DEBOUNCE_default(handle);
1a00063a:	4620      	mov	r0, r4
1a00063c:	f7ff fff0 	bl	1a000620 <enseq_TECX_DEBOUNCE_default>
}
1a000640:	bd10      	pop	{r4, pc}

1a000642 <react_TECX_NO_OPRIMIDO>:
{
1a000642:	b510      	push	{r4, lr}
1a000644:	4604      	mov	r4, r0
	if (check_TECX_NO_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a000646:	f7ff fe67 	bl	1a000318 <check_TECX_NO_OPRIMIDO_tr0_tr0>
1a00064a:	b900      	cbnz	r0, 1a00064e <react_TECX_NO_OPRIMIDO+0xc>
}
1a00064c:	bd10      	pop	{r4, pc}
		effect_TECX_NO_OPRIMIDO_tr0(handle);
1a00064e:	4620      	mov	r0, r4
1a000650:	f7ff ffef 	bl	1a000632 <effect_TECX_NO_OPRIMIDO_tr0>
}
1a000654:	e7fa      	b.n	1a00064c <react_TECX_NO_OPRIMIDO+0xa>

1a000656 <enact_LED3_TITILA_r1_APAGADO>:
{
1a000656:	b510      	push	{r4, lr}
1a000658:	4604      	mov	r4, r0
	application_setTimer(handle, (sc_eventid) &(handle->timeEvents.application_LED3_TITILA_r1_APAGADO_tev0_raised) , 250, bool_false);
1a00065a:	2300      	movs	r3, #0
1a00065c:	22fa      	movs	r2, #250	; 0xfa
1a00065e:	f100 011a 	add.w	r1, r0, #26
1a000662:	f000 f8fb 	bl	1a00085c <application_setTimer>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED3, APPLICATION_APPLICATIONIFACE_LED_OFF);
1a000666:	2200      	movs	r2, #0
1a000668:	2105      	movs	r1, #5
1a00066a:	4620      	mov	r0, r4
1a00066c:	f000 f8ee 	bl	1a00084c <applicationIface_opLED>
}
1a000670:	bd10      	pop	{r4, pc}

1a000672 <enseq_LED3_TITILA_r1_APAGADO_default>:
{
1a000672:	b510      	push	{r4, lr}
1a000674:	4604      	mov	r4, r0
	enact_LED3_TITILA_r1_APAGADO(handle);
1a000676:	f7ff ffee 	bl	1a000656 <enact_LED3_TITILA_r1_APAGADO>
	handle->stateConfVector[2] = Application_LED3_TITILA_r1_APAGADO;
1a00067a:	2308      	movs	r3, #8
1a00067c:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a00067e:	2302      	movs	r3, #2
1a000680:	6063      	str	r3, [r4, #4]
}
1a000682:	bd10      	pop	{r4, pc}

1a000684 <effect_LED3_TITILA_r1_ENCENDIDO_tr0>:
{
1a000684:	b510      	push	{r4, lr}
1a000686:	4604      	mov	r4, r0
	exseq_LED3_TITILA_r1_ENCENDIDO(handle);
1a000688:	f7ff ff93 	bl	1a0005b2 <exseq_LED3_TITILA_r1_ENCENDIDO>
	enseq_LED3_TITILA_r1_APAGADO_default(handle);
1a00068c:	4620      	mov	r0, r4
1a00068e:	f7ff fff0 	bl	1a000672 <enseq_LED3_TITILA_r1_APAGADO_default>
}
1a000692:	bd10      	pop	{r4, pc}

1a000694 <react_LED3_TITILA_r1_ENCENDIDO>:
{
1a000694:	b510      	push	{r4, lr}
1a000696:	4604      	mov	r4, r0
	if (check_LED3_TITILA_tr0_tr0(handle) == bool_true)
1a000698:	f7ff fe72 	bl	1a000380 <check_LED3_TITILA_tr0_tr0>
1a00069c:	b920      	cbnz	r0, 1a0006a8 <react_LED3_TITILA_r1_ENCENDIDO+0x14>
		if (check_LED3_TITILA_r1_ENCENDIDO_tr0_tr0(handle) == bool_true)
1a00069e:	4620      	mov	r0, r4
1a0006a0:	f7ff fe70 	bl	1a000384 <check_LED3_TITILA_r1_ENCENDIDO_tr0_tr0>
1a0006a4:	b920      	cbnz	r0, 1a0006b0 <react_LED3_TITILA_r1_ENCENDIDO+0x1c>
}
1a0006a6:	bd10      	pop	{r4, pc}
		effect_LED3_TITILA_tr0(handle);
1a0006a8:	4620      	mov	r0, r4
1a0006aa:	f7ff ffa9 	bl	1a000600 <effect_LED3_TITILA_tr0>
1a0006ae:	e7fa      	b.n	1a0006a6 <react_LED3_TITILA_r1_ENCENDIDO+0x12>
			effect_LED3_TITILA_r1_ENCENDIDO_tr0(handle);
1a0006b0:	4620      	mov	r0, r4
1a0006b2:	f7ff ffe7 	bl	1a000684 <effect_LED3_TITILA_r1_ENCENDIDO_tr0>
}
1a0006b6:	e7f6      	b.n	1a0006a6 <react_LED3_TITILA_r1_ENCENDIDO+0x12>

1a0006b8 <react_LED3_TITILA_r1__entry_Default>:
{
1a0006b8:	b508      	push	{r3, lr}
	enseq_LED3_TITILA_r1_APAGADO_default(handle);
1a0006ba:	f7ff ffda 	bl	1a000672 <enseq_LED3_TITILA_r1_APAGADO_default>
}
1a0006be:	bd08      	pop	{r3, pc}

1a0006c0 <enseq_LED3_TITILA_r1_default>:
{
1a0006c0:	b508      	push	{r3, lr}
	react_LED3_TITILA_r1__entry_Default(handle);
1a0006c2:	f7ff fff9 	bl	1a0006b8 <react_LED3_TITILA_r1__entry_Default>
}
1a0006c6:	bd08      	pop	{r3, pc}

1a0006c8 <enseq_LED3_TITILA_default>:
{
1a0006c8:	b508      	push	{r3, lr}
	enseq_LED3_TITILA_r1_default(handle);
1a0006ca:	f7ff fff9 	bl	1a0006c0 <enseq_LED3_TITILA_r1_default>
}
1a0006ce:	bd08      	pop	{r3, pc}

1a0006d0 <effect_LED3_REPOSO_tr0>:
{
1a0006d0:	b510      	push	{r4, lr}
1a0006d2:	4604      	mov	r4, r0
	exseq_LED3_REPOSO(handle);
1a0006d4:	f7ff feac 	bl	1a000430 <exseq_LED3_REPOSO>
	enseq_LED3_TITILA_default(handle);
1a0006d8:	4620      	mov	r0, r4
1a0006da:	f7ff fff5 	bl	1a0006c8 <enseq_LED3_TITILA_default>
}
1a0006de:	bd10      	pop	{r4, pc}

1a0006e0 <react_LED3_REPOSO>:
{
1a0006e0:	b510      	push	{r4, lr}
1a0006e2:	4604      	mov	r4, r0
	if (check_LED3_REPOSO_tr0_tr0(handle) == bool_true)
1a0006e4:	f7ff fe52 	bl	1a00038c <check_LED3_REPOSO_tr0_tr0>
1a0006e8:	b900      	cbnz	r0, 1a0006ec <react_LED3_REPOSO+0xc>
}
1a0006ea:	bd10      	pop	{r4, pc}
		effect_LED3_REPOSO_tr0(handle);
1a0006ec:	4620      	mov	r0, r4
1a0006ee:	f7ff ffef 	bl	1a0006d0 <effect_LED3_REPOSO_tr0>
}
1a0006f2:	e7fa      	b.n	1a0006ea <react_LED3_REPOSO+0xa>

1a0006f4 <enact_LED3_TITILA_r1_ENCENDIDO>:
{
1a0006f4:	b510      	push	{r4, lr}
1a0006f6:	4604      	mov	r4, r0
	application_setTimer(handle, (sc_eventid) &(handle->timeEvents.application_LED3_TITILA_r1_ENCENDIDO_tev0_raised) , 500, bool_false);
1a0006f8:	2300      	movs	r3, #0
1a0006fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a0006fe:	f100 0119 	add.w	r1, r0, #25
1a000702:	f000 f8ab 	bl	1a00085c <application_setTimer>
	applicationIface_opLED(handle, APPLICATION_APPLICATIONIFACE_LED3, APPLICATION_APPLICATIONIFACE_LED_ON);
1a000706:	2201      	movs	r2, #1
1a000708:	2105      	movs	r1, #5
1a00070a:	4620      	mov	r0, r4
1a00070c:	f000 f89e 	bl	1a00084c <applicationIface_opLED>
}
1a000710:	bd10      	pop	{r4, pc}

1a000712 <enseq_LED3_TITILA_r1_ENCENDIDO_default>:
{
1a000712:	b510      	push	{r4, lr}
1a000714:	4604      	mov	r4, r0
	enact_LED3_TITILA_r1_ENCENDIDO(handle);
1a000716:	f7ff ffed 	bl	1a0006f4 <enact_LED3_TITILA_r1_ENCENDIDO>
	handle->stateConfVector[2] = Application_LED3_TITILA_r1_ENCENDIDO;
1a00071a:	2307      	movs	r3, #7
1a00071c:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a00071e:	2302      	movs	r3, #2
1a000720:	6063      	str	r3, [r4, #4]
}
1a000722:	bd10      	pop	{r4, pc}

1a000724 <effect_LED3_TITILA_r1_APAGADO_tr0>:
{
1a000724:	b510      	push	{r4, lr}
1a000726:	4604      	mov	r4, r0
	exseq_LED3_TITILA_r1_APAGADO(handle);
1a000728:	f7ff ff51 	bl	1a0005ce <exseq_LED3_TITILA_r1_APAGADO>
	enseq_LED3_TITILA_r1_ENCENDIDO_default(handle);
1a00072c:	4620      	mov	r0, r4
1a00072e:	f7ff fff0 	bl	1a000712 <enseq_LED3_TITILA_r1_ENCENDIDO_default>
}
1a000732:	bd10      	pop	{r4, pc}

1a000734 <react_LED3_TITILA_r1_APAGADO>:
{
1a000734:	b510      	push	{r4, lr}
1a000736:	4604      	mov	r4, r0
	if (check_LED3_TITILA_tr0_tr0(handle) == bool_true)
1a000738:	f7ff fe22 	bl	1a000380 <check_LED3_TITILA_tr0_tr0>
1a00073c:	b920      	cbnz	r0, 1a000748 <react_LED3_TITILA_r1_APAGADO+0x14>
		if (check_LED3_TITILA_r1_APAGADO_tr0_tr0(handle) == bool_true)
1a00073e:	4620      	mov	r0, r4
1a000740:	f7ff fe22 	bl	1a000388 <check_LED3_TITILA_r1_APAGADO_tr0_tr0>
1a000744:	b920      	cbnz	r0, 1a000750 <react_LED3_TITILA_r1_APAGADO+0x1c>
}
1a000746:	bd10      	pop	{r4, pc}
		effect_LED3_TITILA_tr0(handle);
1a000748:	4620      	mov	r0, r4
1a00074a:	f7ff ff59 	bl	1a000600 <effect_LED3_TITILA_tr0>
1a00074e:	e7fa      	b.n	1a000746 <react_LED3_TITILA_r1_APAGADO+0x12>
			effect_LED3_TITILA_r1_APAGADO_tr0(handle);
1a000750:	4620      	mov	r0, r4
1a000752:	f7ff ffe7 	bl	1a000724 <effect_LED3_TITILA_r1_APAGADO_tr0>
}
1a000756:	e7f6      	b.n	1a000746 <react_LED3_TITILA_r1_APAGADO+0x12>

1a000758 <application_init>:
{
1a000758:	b538      	push	{r3, r4, r5, lr}
1a00075a:	4604      	mov	r4, r0
		for (i = 0; i < APPLICATION_MAX_ORTHOGONAL_STATES; ++i)
1a00075c:	2300      	movs	r3, #0
1a00075e:	2b02      	cmp	r3, #2
1a000760:	dc03      	bgt.n	1a00076a <application_init+0x12>
			handle->stateConfVector[i] = Application_last_state;
1a000762:	2200      	movs	r2, #0
1a000764:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < APPLICATION_MAX_ORTHOGONAL_STATES; ++i)
1a000766:	3301      	adds	r3, #1
1a000768:	e7f9      	b.n	1a00075e <application_init+0x6>
		handle->stateConfVectorPosition = 0;
1a00076a:	2500      	movs	r5, #0
1a00076c:	6065      	str	r5, [r4, #4]
		clearInEvents(handle);
1a00076e:	4620      	mov	r0, r4
1a000770:	f7ff fdc6 	bl	1a000300 <clearInEvents>
		handle->internal.viTecla = 0;
1a000774:	6165      	str	r5, [r4, #20]
}
1a000776:	bd38      	pop	{r3, r4, r5, pc}

1a000778 <application_enter>:
{
1a000778:	b510      	push	{r4, lr}
1a00077a:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a00077c:	f7ff fe7d 	bl	1a00047a <enseq_TECX_default>
	enseq_main_region_default(handle);
1a000780:	4620      	mov	r0, r4
1a000782:	f7ff fe82 	bl	1a00048a <enseq_main_region_default>
	enseq_LED3_default(handle);
1a000786:	4620      	mov	r0, r4
1a000788:	f7ff fe96 	bl	1a0004b8 <enseq_LED3_default>
}
1a00078c:	bd10      	pop	{r4, pc}
1a00078e:	Address 0x1a00078e is out of bounds.


1a000790 <application_runCycle>:
{
1a000790:	b510      	push	{r4, lr}
1a000792:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a000794:	2300      	movs	r3, #0
1a000796:	6043      	str	r3, [r0, #4]
1a000798:	e005      	b.n	1a0007a6 <application_runCycle+0x16>
			react_TECX_DEBOUNCE(handle);
1a00079a:	4620      	mov	r0, r4
1a00079c:	f7ff fef9 	bl	1a000592 <react_TECX_DEBOUNCE>
		handle->stateConfVectorPosition++)
1a0007a0:	6863      	ldr	r3, [r4, #4]
1a0007a2:	3301      	adds	r3, #1
1a0007a4:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < APPLICATION_MAX_ORTHOGONAL_STATES;
1a0007a6:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a0007a8:	2b02      	cmp	r3, #2
1a0007aa:	d835      	bhi.n	1a000818 <application_runCycle+0x88>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a0007ac:	5ce3      	ldrb	r3, [r4, r3]
1a0007ae:	3b01      	subs	r3, #1
1a0007b0:	2b08      	cmp	r3, #8
1a0007b2:	d8f5      	bhi.n	1a0007a0 <application_runCycle+0x10>
1a0007b4:	a201      	add	r2, pc, #4	; (adr r2, 1a0007bc <application_runCycle+0x2c>)
1a0007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0007ba:	bf00      	nop
1a0007bc:	1a00079b 	.word	0x1a00079b
1a0007c0:	1a0007e1 	.word	0x1a0007e1
1a0007c4:	1a0007e9 	.word	0x1a0007e9
1a0007c8:	1a0007f1 	.word	0x1a0007f1
1a0007cc:	1a0007f9 	.word	0x1a0007f9
1a0007d0:	1a0007a1 	.word	0x1a0007a1
1a0007d4:	1a000801 	.word	0x1a000801
1a0007d8:	1a000809 	.word	0x1a000809
1a0007dc:	1a000811 	.word	0x1a000811
			react_TECX_NO_OPRIMIDO(handle);
1a0007e0:	4620      	mov	r0, r4
1a0007e2:	f7ff ff2e 	bl	1a000642 <react_TECX_NO_OPRIMIDO>
			break;
1a0007e6:	e7db      	b.n	1a0007a0 <application_runCycle+0x10>
			react_TECX_OPRIMIDO(handle);
1a0007e8:	4620      	mov	r0, r4
1a0007ea:	f7ff fe26 	bl	1a00043a <react_TECX_OPRIMIDO>
			break;
1a0007ee:	e7d7      	b.n	1a0007a0 <application_runCycle+0x10>
			react_TECX_VALIDACION(handle);
1a0007f0:	4620      	mov	r0, r4
1a0007f2:	f7ff fe2c 	bl	1a00044e <react_TECX_VALIDACION>
			break;
1a0007f6:	e7d3      	b.n	1a0007a0 <application_runCycle+0x10>
			react_main_region_ESPERA(handle);
1a0007f8:	4620      	mov	r0, r4
1a0007fa:	f7ff fe94 	bl	1a000526 <react_main_region_ESPERA>
			break;
1a0007fe:	e7cf      	b.n	1a0007a0 <application_runCycle+0x10>
			react_LED3_TITILA_r1_ENCENDIDO(handle);
1a000800:	4620      	mov	r0, r4
1a000802:	f7ff ff47 	bl	1a000694 <react_LED3_TITILA_r1_ENCENDIDO>
			break;
1a000806:	e7cb      	b.n	1a0007a0 <application_runCycle+0x10>
			react_LED3_TITILA_r1_APAGADO(handle);
1a000808:	4620      	mov	r0, r4
1a00080a:	f7ff ff93 	bl	1a000734 <react_LED3_TITILA_r1_APAGADO>
			break;
1a00080e:	e7c7      	b.n	1a0007a0 <application_runCycle+0x10>
			react_LED3_REPOSO(handle);
1a000810:	4620      	mov	r0, r4
1a000812:	f7ff ff65 	bl	1a0006e0 <react_LED3_REPOSO>
			break;
1a000816:	e7c3      	b.n	1a0007a0 <application_runCycle+0x10>
	clearInEvents(handle);
1a000818:	4620      	mov	r0, r4
1a00081a:	f7ff fd71 	bl	1a000300 <clearInEvents>
}
1a00081e:	bd10      	pop	{r4, pc}

1a000820 <application_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000820:	3018      	adds	r0, #24
1a000822:	4288      	cmp	r0, r1
1a000824:	dc04      	bgt.n	1a000830 <application_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(ApplicationTimeEvents))
1a000826:	3003      	adds	r0, #3
1a000828:	4288      	cmp	r0, r1
1a00082a:	d901      	bls.n	1a000830 <application_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a00082c:	2301      	movs	r3, #1
1a00082e:	700b      	strb	r3, [r1, #0]
}
1a000830:	4770      	bx	lr

1a000832 <applicationIface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a000832:	2301      	movs	r3, #1
1a000834:	7203      	strb	r3, [r0, #8]
}
1a000836:	4770      	bx	lr

1a000838 <applicationIface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a000838:	60c1      	str	r1, [r0, #12]
	handle->iface.evTECXOprimido_raised = bool_true;
1a00083a:	2301      	movs	r3, #1
1a00083c:	7243      	strb	r3, [r0, #9]
}
1a00083e:	4770      	bx	lr

1a000840 <myTickHook>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a000840:	4b01      	ldr	r3, [pc, #4]	; (1a000848 <myTickHook+0x8>)
1a000842:	2201      	movs	r2, #1
1a000844:	701a      	strb	r2, [r3, #0]
}
1a000846:	4770      	bx	lr
1a000848:	10000048 	.word	0x10000048

1a00084c <applicationIface_opLED>:
{
1a00084c:	b508      	push	{r3, lr}
	gpioWrite( (LEDR + LEDNumber), State );
1a00084e:	f101 0028 	add.w	r0, r1, #40	; 0x28
1a000852:	4611      	mov	r1, r2
1a000854:	b240      	sxtb	r0, r0
1a000856:	f001 f8c7 	bl	1a0019e8 <gpioWrite>
}
1a00085a:	bd08      	pop	{r3, pc}

1a00085c <application_setTimer>:
{
1a00085c:	b500      	push	{lr}
1a00085e:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a000860:	9300      	str	r3, [sp, #0]
1a000862:	4613      	mov	r3, r2
1a000864:	460a      	mov	r2, r1
1a000866:	2103      	movs	r1, #3
1a000868:	4802      	ldr	r0, [pc, #8]	; (1a000874 <application_setTimer+0x18>)
1a00086a:	f000 f888 	bl	1a00097e <SetNewTimerTick>
}
1a00086e:	b003      	add	sp, #12
1a000870:	f85d fb04 	ldr.w	pc, [sp], #4
1a000874:	10000088 	.word	0x10000088

1a000878 <application_unsetTimer>:
{
1a000878:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a00087a:	460a      	mov	r2, r1
1a00087c:	2103      	movs	r1, #3
1a00087e:	4802      	ldr	r0, [pc, #8]	; (1a000888 <application_unsetTimer+0x10>)
1a000880:	f000 f896 	bl	1a0009b0 <UnsetTimerTick>
}
1a000884:	bd08      	pop	{r3, pc}
1a000886:	bf00      	nop
1a000888:	10000088 	.word	0x10000088

1a00088c <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a00088c:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a00088e:	2400      	movs	r4, #0
	uint8_t ret = false;
1a000890:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a000892:	e000      	b.n	1a000896 <Buttons_GetStatus_+0xa>
1a000894:	3401      	adds	r4, #1
1a000896:	2c03      	cmp	r4, #3
1a000898:	d80b      	bhi.n	1a0008b2 <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0)
1a00089a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00089e:	b240      	sxtb	r0, r0
1a0008a0:	f001 f8d7 	bl	1a001a52 <gpioRead>
1a0008a4:	2800      	cmp	r0, #0
1a0008a6:	d1f5      	bne.n	1a000894 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a0008a8:	2301      	movs	r3, #1
1a0008aa:	40a3      	lsls	r3, r4
1a0008ac:	431d      	orrs	r5, r3
1a0008ae:	b2ed      	uxtb	r5, r5
1a0008b0:	e7f0      	b.n	1a000894 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a0008b2:	4628      	mov	r0, r5
1a0008b4:	bd38      	pop	{r3, r4, r5, pc}
1a0008b6:	Address 0x1a0008b6 is out of bounds.


1a0008b8 <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - Application
 * @return	Function should not exit.
 */
int main(void)
{
1a0008b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	boardConfig();
1a0008ba:	f001 f97d 	bl	1a001bb8 <boardInit>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a0008be:	2001      	movs	r0, #1
1a0008c0:	2100      	movs	r1, #0
1a0008c2:	f001 f917 	bl	1a001af4 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a0008c6:	2100      	movs	r1, #0
1a0008c8:	4820      	ldr	r0, [pc, #128]	; (1a00094c <main+0x94>)
1a0008ca:	f001 f8f7 	bl	1a001abc <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a0008ce:	2103      	movs	r1, #3
1a0008d0:	481f      	ldr	r0, [pc, #124]	; (1a000950 <main+0x98>)
1a0008d2:	f000 f843 	bl	1a00095c <InitTimerTicks>

	/* Statechart Initialization */
	application_init( &statechart );
1a0008d6:	4c1f      	ldr	r4, [pc, #124]	; (1a000954 <main+0x9c>)
1a0008d8:	4620      	mov	r0, r4
1a0008da:	f7ff ff3d 	bl	1a000758 <application_init>
	application_enter( &statechart );
1a0008de:	4620      	mov	r0, r4
1a0008e0:	f7ff ff4a 	bl	1a000778 <application_enter>
1a0008e4:	e020      	b.n	1a000928 <main+0x70>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					application_raiseTimeEvent( &statechart, ticks[i].evid );
1a0008e6:	4d1a      	ldr	r5, [pc, #104]	; (1a000950 <main+0x98>)
1a0008e8:	0126      	lsls	r6, r4, #4
1a0008ea:	59a9      	ldr	r1, [r5, r6]
1a0008ec:	4819      	ldr	r0, [pc, #100]	; (1a000954 <main+0x9c>)
1a0008ee:	f7ff ff97 	bl	1a000820 <application_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a0008f2:	59aa      	ldr	r2, [r5, r6]
1a0008f4:	2103      	movs	r1, #3
1a0008f6:	4628      	mov	r0, r5
1a0008f8:	f000 f88b 	bl	1a000a12 <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a0008fc:	3401      	adds	r4, #1
1a0008fe:	2c02      	cmp	r4, #2
1a000900:	d808      	bhi.n	1a000914 <main+0x5c>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a000902:	4813      	ldr	r0, [pc, #76]	; (1a000950 <main+0x98>)
1a000904:	0123      	lsls	r3, r4, #4
1a000906:	58c2      	ldr	r2, [r0, r3]
1a000908:	2103      	movs	r1, #3
1a00090a:	f000 f86b 	bl	1a0009e4 <IsPendEvent>
1a00090e:	2800      	cmp	r0, #0
1a000910:	d0f4      	beq.n	1a0008fc <main+0x44>
1a000912:	e7e8      	b.n	1a0008e6 <main+0x2e>
				}
			}

			/* Then Get status of buttons */
			BUTTON_Status = Buttons_GetStatus_();
1a000914:	f7ff ffba 	bl	1a00088c <Buttons_GetStatus_>

			/* Then if there are a pressed button */
			if (BUTTON_Status != 0)
1a000918:	4601      	mov	r1, r0
1a00091a:	b190      	cbz	r0, 1a000942 <main+0x8a>

				/* Then Raise an Event -> evTECXOprimodo => OK,
				 * and Value of pressed button -> viTecla */
				applicationIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a00091c:	480d      	ldr	r0, [pc, #52]	; (1a000954 <main+0x9c>)
1a00091e:	f7ff ff8b 	bl	1a000838 <applicationIface_raise_evTECXOprimido>
			else
				/* Then else Raise an Event -> evTECXNoOprimido => OK */
				applicationIface_raise_evTECXNoOprimido(&statechart);

			/* Then Run an Cycle of Statechart */
			application_runCycle(&statechart);		// Run Cycle of Statechart
1a000922:	480c      	ldr	r0, [pc, #48]	; (1a000954 <main+0x9c>)
1a000924:	f7ff ff34 	bl	1a000790 <application_runCycle>
		__WFI();
1a000928:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a00092a:	4b0b      	ldr	r3, [pc, #44]	; (1a000958 <main+0xa0>)
1a00092c:	781b      	ldrb	r3, [r3, #0]
1a00092e:	2b00      	cmp	r3, #0
1a000930:	d0fa      	beq.n	1a000928 <main+0x70>
			SysTick_Time_Flag = false;
1a000932:	2400      	movs	r4, #0
1a000934:	4b08      	ldr	r3, [pc, #32]	; (1a000958 <main+0xa0>)
1a000936:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a000938:	2103      	movs	r1, #3
1a00093a:	4805      	ldr	r0, [pc, #20]	; (1a000950 <main+0x98>)
1a00093c:	f000 f87b 	bl	1a000a36 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a000940:	e7dd      	b.n	1a0008fe <main+0x46>
				applicationIface_raise_evTECXNoOprimido(&statechart);
1a000942:	4804      	ldr	r0, [pc, #16]	; (1a000954 <main+0x9c>)
1a000944:	f7ff ff75 	bl	1a000832 <applicationIface_raise_evTECXNoOprimido>
1a000948:	e7eb      	b.n	1a000922 <main+0x6a>
1a00094a:	bf00      	nop
1a00094c:	1a000841 	.word	0x1a000841
1a000950:	10000088 	.word	0x10000088
1a000954:	1000004c 	.word	0x1000004c
1a000958:	10000048 	.word	0x10000048

1a00095c <InitTimerTicks>:
#include "Application.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a00095c:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00095e:	2400      	movs	r4, #0
1a000960:	428c      	cmp	r4, r1
1a000962:	d20a      	bcs.n	1a00097a <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a000964:	0125      	lsls	r5, r4, #4
1a000966:	1942      	adds	r2, r0, r5
1a000968:	2300      	movs	r3, #0
1a00096a:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a00096c:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a00096e:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a000970:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a000972:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a000974:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a000976:	3401      	adds	r4, #1
1a000978:	e7f2      	b.n	1a000960 <InitTimerTicks+0x4>
	}
}
1a00097a:	bc30      	pop	{r4, r5}
1a00097c:	4770      	bx	lr

1a00097e <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a00097e:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a000980:	2400      	movs	r4, #0
1a000982:	428c      	cmp	r4, r1
1a000984:	d211      	bcs.n	1a0009aa <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a000986:	0125      	lsls	r5, r4, #4
1a000988:	1946      	adds	r6, r0, r5
1a00098a:	5945      	ldr	r5, [r0, r5]
1a00098c:	b10d      	cbz	r5, 1a000992 <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a00098e:	3401      	adds	r4, #1
1a000990:	e7f7      	b.n	1a000982 <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a000992:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a000994:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a000996:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a000998:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00099c:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a00099e:	2301      	movs	r3, #1
1a0009a0:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a0009a2:	2300      	movs	r3, #0
1a0009a4:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a0009a6:	4610      	mov	r0, r2
			break;
1a0009a8:	e000      	b.n	1a0009ac <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a0009aa:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a0009ac:	bc70      	pop	{r4, r5, r6}
1a0009ae:	4770      	bx	lr

1a0009b0 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0009b0:	2300      	movs	r3, #0
1a0009b2:	428b      	cmp	r3, r1
1a0009b4:	d214      	bcs.n	1a0009e0 <UnsetTimerTick+0x30>
{
1a0009b6:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0009b8:	011c      	lsls	r4, r3, #4
1a0009ba:	1905      	adds	r5, r0, r4
1a0009bc:	5904      	ldr	r4, [r0, r4]
1a0009be:	4294      	cmp	r4, r2
1a0009c0:	d004      	beq.n	1a0009cc <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a0009c2:	3301      	adds	r3, #1
1a0009c4:	428b      	cmp	r3, r1
1a0009c6:	d3f7      	bcc.n	1a0009b8 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0009c8:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0009ca:	e007      	b.n	1a0009dc <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a0009cc:	2300      	movs	r3, #0
1a0009ce:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a0009d0:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a0009d2:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a0009d4:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a0009d6:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0009d8:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0009da:	4610      	mov	r0, r2
}
1a0009dc:	bc30      	pop	{r4, r5}
1a0009de:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0009e0:	2000      	movs	r0, #0
}
1a0009e2:	4770      	bx	lr

1a0009e4 <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0009e4:	2300      	movs	r3, #0
1a0009e6:	428b      	cmp	r3, r1
1a0009e8:	d211      	bcs.n	1a000a0e <IsPendEvent+0x2a>
{
1a0009ea:	b430      	push	{r4, r5}
1a0009ec:	e002      	b.n	1a0009f4 <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0009ee:	3301      	adds	r3, #1
1a0009f0:	428b      	cmp	r3, r1
1a0009f2:	d209      	bcs.n	1a000a08 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0009f4:	011c      	lsls	r4, r3, #4
1a0009f6:	1905      	adds	r5, r0, r4
1a0009f8:	5904      	ldr	r4, [r0, r4]
1a0009fa:	4294      	cmp	r4, r2
1a0009fc:	d1f7      	bne.n	1a0009ee <IsPendEvent+0xa>
1a0009fe:	7bac      	ldrb	r4, [r5, #14]
1a000a00:	2c00      	cmp	r4, #0
1a000a02:	d0f4      	beq.n	1a0009ee <IsPendEvent+0xa>
			ret = true;
1a000a04:	2001      	movs	r0, #1
1a000a06:	e000      	b.n	1a000a0a <IsPendEvent+0x26>
	sc_boolean ret = false;
1a000a08:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a000a0a:	bc30      	pop	{r4, r5}
1a000a0c:	4770      	bx	lr
	sc_boolean ret = false;
1a000a0e:	2000      	movs	r0, #0
}
1a000a10:	4770      	bx	lr

1a000a12 <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a000a12:	2300      	movs	r3, #0
1a000a14:	428b      	cmp	r3, r1
1a000a16:	d20d      	bcs.n	1a000a34 <MarkAsAttEvent+0x22>
{
1a000a18:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a000a1a:	011c      	lsls	r4, r3, #4
1a000a1c:	1905      	adds	r5, r0, r4
1a000a1e:	5904      	ldr	r4, [r0, r4]
1a000a20:	4294      	cmp	r4, r2
1a000a22:	d003      	beq.n	1a000a2c <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a000a24:	3301      	adds	r3, #1
1a000a26:	428b      	cmp	r3, r1
1a000a28:	d3f7      	bcc.n	1a000a1a <MarkAsAttEvent+0x8>
1a000a2a:	e001      	b.n	1a000a30 <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a000a30:	bc30      	pop	{r4, r5}
1a000a32:	4770      	bx	lr
1a000a34:	4770      	bx	lr

1a000a36 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a000a36:	2300      	movs	r3, #0
1a000a38:	428b      	cmp	r3, r1
1a000a3a:	d21d      	bcs.n	1a000a78 <UpdateTimers+0x42>
{
1a000a3c:	b410      	push	{r4}
1a000a3e:	e006      	b.n	1a000a4e <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a000a40:	2400      	movs	r4, #0
1a000a42:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a000a44:	2401      	movs	r4, #1
1a000a46:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a000a48:	3301      	adds	r3, #1
1a000a4a:	428b      	cmp	r3, r1
1a000a4c:	d211      	bcs.n	1a000a72 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a000a4e:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a000a52:	7b54      	ldrb	r4, [r2, #13]
1a000a54:	2c00      	cmp	r4, #0
1a000a56:	d0f7      	beq.n	1a000a48 <UpdateTimers+0x12>
			if(list[i].count)
1a000a58:	6894      	ldr	r4, [r2, #8]
1a000a5a:	b10c      	cbz	r4, 1a000a60 <UpdateTimers+0x2a>
				list[i].count--;
1a000a5c:	3c01      	subs	r4, #1
1a000a5e:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a000a60:	6894      	ldr	r4, [r2, #8]
1a000a62:	2c00      	cmp	r4, #0
1a000a64:	d1f0      	bne.n	1a000a48 <UpdateTimers+0x12>
				if(list[i].periodic)
1a000a66:	7b14      	ldrb	r4, [r2, #12]
1a000a68:	2c00      	cmp	r4, #0
1a000a6a:	d0e9      	beq.n	1a000a40 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a000a6c:	6854      	ldr	r4, [r2, #4]
1a000a6e:	6094      	str	r4, [r2, #8]
1a000a70:	e7e8      	b.n	1a000a44 <UpdateTimers+0xe>
			}
		}
	}
}
1a000a72:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a76:	4770      	bx	lr
1a000a78:	4770      	bx	lr

1a000a7a <initialise_monitor_handles>:
}
1a000a7a:	4770      	bx	lr

1a000a7c <Reset_Handler>:
void Reset_Handler(void) {
1a000a7c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000a7e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000a80:	4b19      	ldr	r3, [pc, #100]	; (1a000ae8 <Reset_Handler+0x6c>)
1a000a82:	4a1a      	ldr	r2, [pc, #104]	; (1a000aec <Reset_Handler+0x70>)
1a000a84:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000a86:	3304      	adds	r3, #4
1a000a88:	4a19      	ldr	r2, [pc, #100]	; (1a000af0 <Reset_Handler+0x74>)
1a000a8a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a8c:	2300      	movs	r3, #0
1a000a8e:	e005      	b.n	1a000a9c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000a90:	4a18      	ldr	r2, [pc, #96]	; (1a000af4 <Reset_Handler+0x78>)
1a000a92:	f04f 31ff 	mov.w	r1, #4294967295
1a000a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a9a:	3301      	adds	r3, #1
1a000a9c:	2b07      	cmp	r3, #7
1a000a9e:	d9f7      	bls.n	1a000a90 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000aa0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000aa2:	4b15      	ldr	r3, [pc, #84]	; (1a000af8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000aa4:	e007      	b.n	1a000ab6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000aa6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000aaa:	689a      	ldr	r2, [r3, #8]
1a000aac:	6859      	ldr	r1, [r3, #4]
1a000aae:	6818      	ldr	r0, [r3, #0]
1a000ab0:	f7ff fb6b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000ab4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000ab6:	4a11      	ldr	r2, [pc, #68]	; (1a000afc <Reset_Handler+0x80>)
1a000ab8:	4293      	cmp	r3, r2
1a000aba:	d3f4      	bcc.n	1a000aa6 <Reset_Handler+0x2a>
1a000abc:	e006      	b.n	1a000acc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000abe:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000ac0:	6859      	ldr	r1, [r3, #4]
1a000ac2:	f854 0b08 	ldr.w	r0, [r4], #8
1a000ac6:	f7ff fb6f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000aca:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000acc:	4a0c      	ldr	r2, [pc, #48]	; (1a000b00 <Reset_Handler+0x84>)
1a000ace:	4293      	cmp	r3, r2
1a000ad0:	d3f5      	bcc.n	1a000abe <Reset_Handler+0x42>
    SystemInit();
1a000ad2:	f000 fe6f 	bl	1a0017b4 <SystemInit>
    __libc_init_array();
1a000ad6:	f001 fa2b 	bl	1a001f30 <__libc_init_array>
    initialise_monitor_handles();
1a000ada:	f7ff ffce 	bl	1a000a7a <initialise_monitor_handles>
    main();
1a000ade:	f7ff feeb 	bl	1a0008b8 <main>
        __asm__ volatile("wfi");
1a000ae2:	bf30      	wfi
1a000ae4:	e7fd      	b.n	1a000ae2 <Reset_Handler+0x66>
1a000ae6:	bf00      	nop
1a000ae8:	40053100 	.word	0x40053100
1a000aec:	10df1000 	.word	0x10df1000
1a000af0:	01dff7ff 	.word	0x01dff7ff
1a000af4:	e000e280 	.word	0xe000e280
1a000af8:	1a000114 	.word	0x1a000114
1a000afc:	1a000150 	.word	0x1a000150
1a000b00:	1a000178 	.word	0x1a000178

1a000b04 <_fini>:
void _fini(void) {}
1a000b04:	4770      	bx	lr

1a000b06 <_init>:
void _init(void) {}
1a000b06:	4770      	bx	lr

1a000b08 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b08:	2300      	movs	r3, #0
1a000b0a:	2b1c      	cmp	r3, #28
1a000b0c:	d812      	bhi.n	1a000b34 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000b0e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000b10:	4a09      	ldr	r2, [pc, #36]	; (1a000b38 <Board_SetupMuxing+0x30>)
1a000b12:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b16:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b1a:	784a      	ldrb	r2, [r1, #1]
1a000b1c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b1e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b22:	4906      	ldr	r1, [pc, #24]	; (1a000b3c <Board_SetupMuxing+0x34>)
1a000b24:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b28:	3301      	adds	r3, #1
1a000b2a:	2b1c      	cmp	r3, #28
1a000b2c:	d9f0      	bls.n	1a000b10 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b32:	4770      	bx	lr
1a000b34:	4770      	bx	lr
1a000b36:	bf00      	nop
1a000b38:	1a001f8c 	.word	0x1a001f8c
1a000b3c:	40086000 	.word	0x40086000

1a000b40 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b40:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b42:	4a17      	ldr	r2, [pc, #92]	; (1a000ba0 <Board_SetupClocking+0x60>)
1a000b44:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b4c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b50:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b54:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b5c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b60:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b64:	2201      	movs	r2, #1
1a000b66:	490f      	ldr	r1, [pc, #60]	; (1a000ba4 <Board_SetupClocking+0x64>)
1a000b68:	2006      	movs	r0, #6
1a000b6a:	f000 f9f9 	bl	1a000f60 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b6e:	2400      	movs	r4, #0
1a000b70:	b14c      	cbz	r4, 1a000b86 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b72:	4b0b      	ldr	r3, [pc, #44]	; (1a000ba0 <Board_SetupClocking+0x60>)
1a000b74:	685a      	ldr	r2, [r3, #4]
1a000b76:	f022 020c 	bic.w	r2, r2, #12
1a000b7a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b7c:	685a      	ldr	r2, [r3, #4]
1a000b7e:	f042 0203 	orr.w	r2, r2, #3
1a000b82:	605a      	str	r2, [r3, #4]
}
1a000b84:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b86:	4808      	ldr	r0, [pc, #32]	; (1a000ba8 <Board_SetupClocking+0x68>)
1a000b88:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b8c:	2301      	movs	r3, #1
1a000b8e:	788a      	ldrb	r2, [r1, #2]
1a000b90:	7849      	ldrb	r1, [r1, #1]
1a000b92:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b96:	f000 fcbb 	bl	1a001510 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b9a:	3401      	adds	r4, #1
1a000b9c:	e7e8      	b.n	1a000b70 <Board_SetupClocking+0x30>
1a000b9e:	bf00      	nop
1a000ba0:	40043000 	.word	0x40043000
1a000ba4:	0c28cb00 	.word	0x0c28cb00
1a000ba8:	1a001f88 	.word	0x1a001f88

1a000bac <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000bac:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000bae:	f7ff ffab 	bl	1a000b08 <Board_SetupMuxing>
    Board_SetupClocking();
1a000bb2:	f7ff ffc5 	bl	1a000b40 <Board_SetupClocking>
}
1a000bb6:	bd08      	pop	{r3, pc}

1a000bb8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000bb8:	2200      	movs	r2, #0
1a000bba:	2a05      	cmp	r2, #5
1a000bbc:	d819      	bhi.n	1a000bf2 <Board_LED_Init+0x3a>
{
1a000bbe:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000bc0:	490c      	ldr	r1, [pc, #48]	; (1a000bf4 <Board_LED_Init+0x3c>)
1a000bc2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000bc6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000bca:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000bcc:	4b0a      	ldr	r3, [pc, #40]	; (1a000bf8 <Board_LED_Init+0x40>)
1a000bce:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000bd2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000bd6:	2001      	movs	r0, #1
1a000bd8:	40a0      	lsls	r0, r4
1a000bda:	4301      	orrs	r1, r0
1a000bdc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000be0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000be4:	2100      	movs	r1, #0
1a000be6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000be8:	3201      	adds	r2, #1
1a000bea:	2a05      	cmp	r2, #5
1a000bec:	d9e8      	bls.n	1a000bc0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000bee:	bc70      	pop	{r4, r5, r6}
1a000bf0:	4770      	bx	lr
1a000bf2:	4770      	bx	lr
1a000bf4:	1a00200c 	.word	0x1a00200c
1a000bf8:	400f4000 	.word	0x400f4000

1a000bfc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000bfc:	2300      	movs	r3, #0
1a000bfe:	2b03      	cmp	r3, #3
1a000c00:	d816      	bhi.n	1a000c30 <Board_TEC_Init+0x34>
{
1a000c02:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000c04:	490b      	ldr	r1, [pc, #44]	; (1a000c34 <Board_TEC_Init+0x38>)
1a000c06:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000c0a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000c0e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000c10:	4c09      	ldr	r4, [pc, #36]	; (1a000c38 <Board_TEC_Init+0x3c>)
1a000c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000c16:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000c1a:	2001      	movs	r0, #1
1a000c1c:	40a8      	lsls	r0, r5
1a000c1e:	ea21 0100 	bic.w	r1, r1, r0
1a000c22:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000c26:	3301      	adds	r3, #1
1a000c28:	2b03      	cmp	r3, #3
1a000c2a:	d9eb      	bls.n	1a000c04 <Board_TEC_Init+0x8>
   }
}
1a000c2c:	bc30      	pop	{r4, r5}
1a000c2e:	4770      	bx	lr
1a000c30:	4770      	bx	lr
1a000c32:	bf00      	nop
1a000c34:	1a002004 	.word	0x1a002004
1a000c38:	400f4000 	.word	0x400f4000

1a000c3c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000c3c:	2300      	movs	r3, #0
1a000c3e:	2b08      	cmp	r3, #8
1a000c40:	d816      	bhi.n	1a000c70 <Board_GPIO_Init+0x34>
{
1a000c42:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000c44:	490b      	ldr	r1, [pc, #44]	; (1a000c74 <Board_GPIO_Init+0x38>)
1a000c46:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000c4a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000c4e:	784d      	ldrb	r5, [r1, #1]
1a000c50:	4c09      	ldr	r4, [pc, #36]	; (1a000c78 <Board_GPIO_Init+0x3c>)
1a000c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000c56:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000c5a:	2001      	movs	r0, #1
1a000c5c:	40a8      	lsls	r0, r5
1a000c5e:	ea21 0100 	bic.w	r1, r1, r0
1a000c62:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000c66:	3301      	adds	r3, #1
1a000c68:	2b08      	cmp	r3, #8
1a000c6a:	d9eb      	bls.n	1a000c44 <Board_GPIO_Init+0x8>
   }
}
1a000c6c:	bc30      	pop	{r4, r5}
1a000c6e:	4770      	bx	lr
1a000c70:	4770      	bx	lr
1a000c72:	bf00      	nop
1a000c74:	1a002018 	.word	0x1a002018
1a000c78:	400f4000 	.word	0x400f4000

1a000c7c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000c7c:	b510      	push	{r4, lr}
1a000c7e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000c80:	4c08      	ldr	r4, [pc, #32]	; (1a000ca4 <Board_ADC_Init+0x28>)
1a000c82:	4669      	mov	r1, sp
1a000c84:	4620      	mov	r0, r4
1a000c86:	f000 f92b 	bl	1a000ee0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000c8a:	4a07      	ldr	r2, [pc, #28]	; (1a000ca8 <Board_ADC_Init+0x2c>)
1a000c8c:	4669      	mov	r1, sp
1a000c8e:	4620      	mov	r0, r4
1a000c90:	f000 f946 	bl	1a000f20 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000c94:	2200      	movs	r2, #0
1a000c96:	4669      	mov	r1, sp
1a000c98:	4620      	mov	r0, r4
1a000c9a:	f000 f95a 	bl	1a000f52 <Chip_ADC_SetResolution>
}
1a000c9e:	b002      	add	sp, #8
1a000ca0:	bd10      	pop	{r4, pc}
1a000ca2:	bf00      	nop
1a000ca4:	400e3000 	.word	0x400e3000
1a000ca8:	00061a80 	.word	0x00061a80

1a000cac <Board_SPI_Init>:
{
1a000cac:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000cae:	4c0b      	ldr	r4, [pc, #44]	; (1a000cdc <Board_SPI_Init+0x30>)
1a000cb0:	4620      	mov	r0, r4
1a000cb2:	f000 f895 	bl	1a000de0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000cb6:	6863      	ldr	r3, [r4, #4]
1a000cb8:	f023 0304 	bic.w	r3, r3, #4
1a000cbc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000cbe:	6823      	ldr	r3, [r4, #0]
1a000cc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000cc4:	f043 0307 	orr.w	r3, r3, #7
1a000cc8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000cca:	4905      	ldr	r1, [pc, #20]	; (1a000ce0 <Board_SPI_Init+0x34>)
1a000ccc:	4620      	mov	r0, r4
1a000cce:	f000 f868 	bl	1a000da2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000cd2:	6863      	ldr	r3, [r4, #4]
1a000cd4:	f043 0302 	orr.w	r3, r3, #2
1a000cd8:	6063      	str	r3, [r4, #4]
}
1a000cda:	bd10      	pop	{r4, pc}
1a000cdc:	400c5000 	.word	0x400c5000
1a000ce0:	000186a0 	.word	0x000186a0

1a000ce4 <Board_I2C_Init>:
{
1a000ce4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000ce6:	2000      	movs	r0, #0
1a000ce8:	f000 f8a6 	bl	1a000e38 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000cec:	4b04      	ldr	r3, [pc, #16]	; (1a000d00 <Board_I2C_Init+0x1c>)
1a000cee:	f640 0208 	movw	r2, #2056	; 0x808
1a000cf2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000cf6:	4903      	ldr	r1, [pc, #12]	; (1a000d04 <Board_I2C_Init+0x20>)
1a000cf8:	2000      	movs	r0, #0
1a000cfa:	f000 f8af 	bl	1a000e5c <Chip_I2C_SetClockRate>
}
1a000cfe:	bd08      	pop	{r3, pc}
1a000d00:	40086000 	.word	0x40086000
1a000d04:	000f4240 	.word	0x000f4240

1a000d08 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000d08:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000d0a:	4c07      	ldr	r4, [pc, #28]	; (1a000d28 <Board_Debug_Init+0x20>)
1a000d0c:	4620      	mov	r0, r4
1a000d0e:	f000 fcb9 	bl	1a001684 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000d12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000d16:	4620      	mov	r0, r4
1a000d18:	f000 fcde 	bl	1a0016d8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000d1c:	2303      	movs	r3, #3
1a000d1e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000d20:	2301      	movs	r3, #1
1a000d22:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000d24:	bd10      	pop	{r4, pc}
1a000d26:	bf00      	nop
1a000d28:	400c1000 	.word	0x400c1000

1a000d2c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000d2c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000d2e:	f7ff ffeb 	bl	1a000d08 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000d32:	4809      	ldr	r0, [pc, #36]	; (1a000d58 <Board_Init+0x2c>)
1a000d34:	f000 f8ae 	bl	1a000e94 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000d38:	f7ff ff80 	bl	1a000c3c <Board_GPIO_Init>
   Board_ADC_Init();
1a000d3c:	f7ff ff9e 	bl	1a000c7c <Board_ADC_Init>
   Board_SPI_Init();
1a000d40:	f7ff ffb4 	bl	1a000cac <Board_SPI_Init>
   Board_I2C_Init();
1a000d44:	f7ff ffce 	bl	1a000ce4 <Board_I2C_Init>

   Board_LED_Init();
1a000d48:	f7ff ff36 	bl	1a000bb8 <Board_LED_Init>
   Board_TEC_Init();
1a000d4c:	f7ff ff56 	bl	1a000bfc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000d50:	f000 f9b2 	bl	1a0010b8 <SystemCoreClockUpdate>
}
1a000d54:	bd08      	pop	{r3, pc}
1a000d56:	bf00      	nop
1a000d58:	400f4000 	.word	0x400f4000

1a000d5c <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000d5c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000d5e:	f7ff ffd3 	bl	1a000d08 <Board_Debug_Init>
1a000d62:	bd08      	pop	{r3, pc}

1a000d64 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000d64:	4b03      	ldr	r3, [pc, #12]	; (1a000d74 <Chip_SSP_GetClockIndex+0x10>)
1a000d66:	4298      	cmp	r0, r3
1a000d68:	d001      	beq.n	1a000d6e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000d6a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000d6c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000d6e:	20a5      	movs	r0, #165	; 0xa5
1a000d70:	4770      	bx	lr
1a000d72:	bf00      	nop
1a000d74:	400c5000 	.word	0x400c5000

1a000d78 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000d78:	4b04      	ldr	r3, [pc, #16]	; (1a000d8c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000d7a:	4298      	cmp	r0, r3
1a000d7c:	d002      	beq.n	1a000d84 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000d7e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000d82:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000d84:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000d88:	4770      	bx	lr
1a000d8a:	bf00      	nop
1a000d8c:	400c5000 	.word	0x400c5000

1a000d90 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000d90:	6803      	ldr	r3, [r0, #0]
1a000d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000d96:	0209      	lsls	r1, r1, #8
1a000d98:	b289      	uxth	r1, r1
1a000d9a:	4319      	orrs	r1, r3
1a000d9c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000d9e:	6102      	str	r2, [r0, #16]
}
1a000da0:	4770      	bx	lr

1a000da2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000da2:	b570      	push	{r4, r5, r6, lr}
1a000da4:	4606      	mov	r6, r0
1a000da6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000da8:	f7ff ffe6 	bl	1a000d78 <Chip_SSP_GetPeriphClockIndex>
1a000dac:	f000 fc2e 	bl	1a00160c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000db0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000db2:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000db6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000db8:	e000      	b.n	1a000dbc <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000dba:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000dbc:	42ab      	cmp	r3, r5
1a000dbe:	d90b      	bls.n	1a000dd8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000dc0:	1c4c      	adds	r4, r1, #1
1a000dc2:	fb02 f304 	mul.w	r3, r2, r4
1a000dc6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000dca:	429d      	cmp	r5, r3
1a000dcc:	d2f6      	bcs.n	1a000dbc <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000dce:	2cff      	cmp	r4, #255	; 0xff
1a000dd0:	d9f3      	bls.n	1a000dba <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000dd2:	3202      	adds	r2, #2
				cr0_div = 0;
1a000dd4:	2100      	movs	r1, #0
1a000dd6:	e7f1      	b.n	1a000dbc <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000dd8:	4630      	mov	r0, r6
1a000dda:	f7ff ffd9 	bl	1a000d90 <Chip_SSP_SetClockRate>
}
1a000dde:	bd70      	pop	{r4, r5, r6, pc}

1a000de0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000de0:	b510      	push	{r4, lr}
1a000de2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000de4:	f7ff ffbe 	bl	1a000d64 <Chip_SSP_GetClockIndex>
1a000de8:	f000 fbf6 	bl	1a0015d8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000dec:	4620      	mov	r0, r4
1a000dee:	f7ff ffc3 	bl	1a000d78 <Chip_SSP_GetPeriphClockIndex>
1a000df2:	f000 fbf1 	bl	1a0015d8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000df6:	6863      	ldr	r3, [r4, #4]
1a000df8:	f023 0304 	bic.w	r3, r3, #4
1a000dfc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000dfe:	6823      	ldr	r3, [r4, #0]
1a000e00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000e04:	f043 0307 	orr.w	r3, r3, #7
1a000e08:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000e0a:	4902      	ldr	r1, [pc, #8]	; (1a000e14 <Chip_SSP_Init+0x34>)
1a000e0c:	4620      	mov	r0, r4
1a000e0e:	f7ff ffc8 	bl	1a000da2 <Chip_SSP_SetBitRate>
}
1a000e12:	bd10      	pop	{r4, pc}
1a000e14:	000186a0 	.word	0x000186a0

1a000e18 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000e18:	2901      	cmp	r1, #1
1a000e1a:	d109      	bne.n	1a000e30 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000e1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000e20:	0082      	lsls	r2, r0, #2
1a000e22:	4b04      	ldr	r3, [pc, #16]	; (1a000e34 <Chip_I2C_EventHandler+0x1c>)
1a000e24:	4413      	add	r3, r2
1a000e26:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000e28:	7d13      	ldrb	r3, [r2, #20]
1a000e2a:	b2db      	uxtb	r3, r3
1a000e2c:	2b04      	cmp	r3, #4
1a000e2e:	d0fb      	beq.n	1a000e28 <Chip_I2C_EventHandler+0x10>
}
1a000e30:	4770      	bx	lr
1a000e32:	bf00      	nop
1a000e34:	10000000 	.word	0x10000000

1a000e38 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000e38:	b570      	push	{r4, r5, r6, lr}
1a000e3a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000e3c:	4e06      	ldr	r6, [pc, #24]	; (1a000e58 <Chip_I2C_Init+0x20>)
1a000e3e:	00c4      	lsls	r4, r0, #3
1a000e40:	1a22      	subs	r2, r4, r0
1a000e42:	0093      	lsls	r3, r2, #2
1a000e44:	4433      	add	r3, r6
1a000e46:	8898      	ldrh	r0, [r3, #4]
1a000e48:	f000 fbc6 	bl	1a0015d8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000e4c:	1b64      	subs	r4, r4, r5
1a000e4e:	00a3      	lsls	r3, r4, #2
1a000e50:	58f3      	ldr	r3, [r6, r3]
1a000e52:	226c      	movs	r2, #108	; 0x6c
1a000e54:	619a      	str	r2, [r3, #24]
}
1a000e56:	bd70      	pop	{r4, r5, r6, pc}
1a000e58:	10000000 	.word	0x10000000

1a000e5c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e60:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000e62:	4e0b      	ldr	r6, [pc, #44]	; (1a000e90 <Chip_I2C_SetClockRate+0x34>)
1a000e64:	00c5      	lsls	r5, r0, #3
1a000e66:	1a2b      	subs	r3, r5, r0
1a000e68:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000e6c:	eb06 0308 	add.w	r3, r6, r8
1a000e70:	8898      	ldrh	r0, [r3, #4]
1a000e72:	f000 fbcb 	bl	1a00160c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000e76:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000e7a:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e7e:	0842      	lsrs	r2, r0, #1
1a000e80:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000e82:	f856 3008 	ldr.w	r3, [r6, r8]
1a000e86:	691a      	ldr	r2, [r3, #16]
1a000e88:	1a80      	subs	r0, r0, r2
1a000e8a:	6158      	str	r0, [r3, #20]
}
1a000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e90:	10000000 	.word	0x10000000

1a000e94 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000e94:	4770      	bx	lr
1a000e96:	Address 0x1a000e96 is out of bounds.


1a000e98 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000e98:	4b03      	ldr	r3, [pc, #12]	; (1a000ea8 <Chip_ADC_GetClockIndex+0x10>)
1a000e9a:	4298      	cmp	r0, r3
1a000e9c:	d001      	beq.n	1a000ea2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000e9e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000ea0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000ea2:	2004      	movs	r0, #4
1a000ea4:	4770      	bx	lr
1a000ea6:	bf00      	nop
1a000ea8:	400e4000 	.word	0x400e4000

1a000eac <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000eac:	b570      	push	{r4, r5, r6, lr}
1a000eae:	460d      	mov	r5, r1
1a000eb0:	4614      	mov	r4, r2
1a000eb2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000eb4:	f7ff fff0 	bl	1a000e98 <Chip_ADC_GetClockIndex>
1a000eb8:	f000 fba8 	bl	1a00160c <Chip_Clock_GetRate>
	if (burstMode) {
1a000ebc:	b155      	cbz	r5, 1a000ed4 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000ebe:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000ec2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000ec6:	0064      	lsls	r4, r4, #1
1a000ec8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ecc:	b2c0      	uxtb	r0, r0
1a000ece:	3801      	subs	r0, #1
	return div;
}
1a000ed0:	b2c0      	uxtb	r0, r0
1a000ed2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000ed4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000ed8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000edc:	e7f1      	b.n	1a000ec2 <getClkDiv+0x16>
1a000ede:	Address 0x1a000ede is out of bounds.


1a000ee0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ee0:	b538      	push	{r3, r4, r5, lr}
1a000ee2:	4605      	mov	r5, r0
1a000ee4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000ee6:	f7ff ffd7 	bl	1a000e98 <Chip_ADC_GetClockIndex>
1a000eea:	2301      	movs	r3, #1
1a000eec:	461a      	mov	r2, r3
1a000eee:	4619      	mov	r1, r3
1a000ef0:	f000 fb54 	bl	1a00159c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ef4:	2100      	movs	r1, #0
1a000ef6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000ef8:	4a08      	ldr	r2, [pc, #32]	; (1a000f1c <Chip_ADC_Init+0x3c>)
1a000efa:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000efc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000efe:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000f00:	230b      	movs	r3, #11
1a000f02:	4628      	mov	r0, r5
1a000f04:	f7ff ffd2 	bl	1a000eac <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000f08:	0200      	lsls	r0, r0, #8
1a000f0a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000f0e:	7920      	ldrb	r0, [r4, #4]
1a000f10:	0440      	lsls	r0, r0, #17
1a000f12:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000f16:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000f18:	6028      	str	r0, [r5, #0]
}
1a000f1a:	bd38      	pop	{r3, r4, r5, pc}
1a000f1c:	00061a80 	.word	0x00061a80

1a000f20 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000f20:	b570      	push	{r4, r5, r6, lr}
1a000f22:	4605      	mov	r5, r0
1a000f24:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000f26:	6804      	ldr	r4, [r0, #0]
1a000f28:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000f2c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000f30:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000f32:	790b      	ldrb	r3, [r1, #4]
1a000f34:	f1c3 030b 	rsb	r3, r3, #11
1a000f38:	b2db      	uxtb	r3, r3
1a000f3a:	7949      	ldrb	r1, [r1, #5]
1a000f3c:	f7ff ffb6 	bl	1a000eac <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000f40:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000f44:	7933      	ldrb	r3, [r6, #4]
1a000f46:	045b      	lsls	r3, r3, #17
1a000f48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000f4c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000f4e:	602b      	str	r3, [r5, #0]
}
1a000f50:	bd70      	pop	{r4, r5, r6, pc}

1a000f52 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000f52:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000f54:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000f56:	680a      	ldr	r2, [r1, #0]
1a000f58:	f7ff ffe2 	bl	1a000f20 <Chip_ADC_SetSampleRate>
}
1a000f5c:	bd08      	pop	{r3, pc}
1a000f5e:	Address 0x1a000f5e is out of bounds.


1a000f60 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f60:	b570      	push	{r4, r5, r6, lr}
1a000f62:	b08a      	sub	sp, #40	; 0x28
1a000f64:	4605      	mov	r5, r0
1a000f66:	460e      	mov	r6, r1
1a000f68:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f6a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f6e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f70:	2806      	cmp	r0, #6
1a000f72:	d018      	beq.n	1a000fa6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f74:	2300      	movs	r3, #0
1a000f76:	2201      	movs	r2, #1
1a000f78:	4629      	mov	r1, r5
1a000f7a:	2004      	movs	r0, #4
1a000f7c:	f000 fac8 	bl	1a001510 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f80:	4a4a      	ldr	r2, [pc, #296]	; (1a0010ac <Chip_SetupCoreClock+0x14c>)
1a000f82:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f84:	f043 0301 	orr.w	r3, r3, #1
1a000f88:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f8a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f8e:	a901      	add	r1, sp, #4
1a000f90:	4630      	mov	r0, r6
1a000f92:	f000 fa35 	bl	1a001400 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f96:	4b46      	ldr	r3, [pc, #280]	; (1a0010b0 <Chip_SetupCoreClock+0x150>)
1a000f98:	429e      	cmp	r6, r3
1a000f9a:	d916      	bls.n	1a000fca <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f9c:	9b01      	ldr	r3, [sp, #4]
1a000f9e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000fa2:	d003      	beq.n	1a000fac <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000fa4:	e7fe      	b.n	1a000fa4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000fa6:	f000 f98d 	bl	1a0012c4 <Chip_Clock_EnableCrystal>
1a000faa:	e7e3      	b.n	1a000f74 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000fac:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fb0:	d005      	beq.n	1a000fbe <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fb6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000fb8:	2500      	movs	r5, #0
			direct = 1;
1a000fba:	2601      	movs	r6, #1
1a000fbc:	e007      	b.n	1a000fce <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000fbe:	9b04      	ldr	r3, [sp, #16]
1a000fc0:	3301      	adds	r3, #1
1a000fc2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000fc4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000fc6:	2600      	movs	r6, #0
1a000fc8:	e001      	b.n	1a000fce <Chip_SetupCoreClock+0x6e>
1a000fca:	2500      	movs	r5, #0
1a000fcc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fce:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fd2:	9b01      	ldr	r3, [sp, #4]
1a000fd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fd8:	9a05      	ldr	r2, [sp, #20]
1a000fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fde:	9a03      	ldr	r2, [sp, #12]
1a000fe0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fe4:	9a04      	ldr	r2, [sp, #16]
1a000fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fee:	4a2f      	ldr	r2, [pc, #188]	; (1a0010ac <Chip_SetupCoreClock+0x14c>)
1a000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000ff2:	4b2e      	ldr	r3, [pc, #184]	; (1a0010ac <Chip_SetupCoreClock+0x14c>)
1a000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000ff6:	f013 0f01 	tst.w	r3, #1
1a000ffa:	d0fa      	beq.n	1a000ff2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000ffc:	2300      	movs	r3, #0
1a000ffe:	2201      	movs	r2, #1
1a001000:	2109      	movs	r1, #9
1a001002:	2004      	movs	r0, #4
1a001004:	f000 fa84 	bl	1a001510 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001008:	b306      	cbz	r6, 1a00104c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00100a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00100e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001010:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001012:	1e5a      	subs	r2, r3, #1
1a001014:	9209      	str	r2, [sp, #36]	; 0x24
1a001016:	2b00      	cmp	r3, #0
1a001018:	d1fa      	bne.n	1a001010 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00101a:	9b01      	ldr	r3, [sp, #4]
1a00101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001020:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001022:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001026:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00102a:	9a05      	ldr	r2, [sp, #20]
1a00102c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001030:	9a03      	ldr	r2, [sp, #12]
1a001032:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001036:	9a04      	ldr	r2, [sp, #16]
1a001038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00103c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001040:	4a1a      	ldr	r2, [pc, #104]	; (1a0010ac <Chip_SetupCoreClock+0x14c>)
1a001042:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001044:	2c00      	cmp	r4, #0
1a001046:	d12e      	bne.n	1a0010a6 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001048:	b00a      	add	sp, #40	; 0x28
1a00104a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a00104c:	2d00      	cmp	r5, #0
1a00104e:	d0f9      	beq.n	1a001044 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001050:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001054:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001056:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001058:	1e5a      	subs	r2, r3, #1
1a00105a:	9209      	str	r2, [sp, #36]	; 0x24
1a00105c:	2b00      	cmp	r3, #0
1a00105e:	d1fa      	bne.n	1a001056 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001060:	9b04      	ldr	r3, [sp, #16]
1a001062:	1e5a      	subs	r2, r3, #1
1a001064:	9204      	str	r2, [sp, #16]
1a001066:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00106a:	9b01      	ldr	r3, [sp, #4]
1a00106c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001070:	9905      	ldr	r1, [sp, #20]
1a001072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001076:	9903      	ldr	r1, [sp, #12]
1a001078:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00107c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001084:	4a09      	ldr	r2, [pc, #36]	; (1a0010ac <Chip_SetupCoreClock+0x14c>)
1a001086:	6453      	str	r3, [r2, #68]	; 0x44
1a001088:	e7dc      	b.n	1a001044 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00108a:	480a      	ldr	r0, [pc, #40]	; (1a0010b4 <Chip_SetupCoreClock+0x154>)
1a00108c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001090:	78cb      	ldrb	r3, [r1, #3]
1a001092:	788a      	ldrb	r2, [r1, #2]
1a001094:	7849      	ldrb	r1, [r1, #1]
1a001096:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00109a:	f000 fa39 	bl	1a001510 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00109e:	3401      	adds	r4, #1
1a0010a0:	2c11      	cmp	r4, #17
1a0010a2:	d9f2      	bls.n	1a00108a <Chip_SetupCoreClock+0x12a>
1a0010a4:	e7d0      	b.n	1a001048 <Chip_SetupCoreClock+0xe8>
1a0010a6:	2400      	movs	r4, #0
1a0010a8:	e7fa      	b.n	1a0010a0 <Chip_SetupCoreClock+0x140>
1a0010aa:	bf00      	nop
1a0010ac:	40050000 	.word	0x40050000
1a0010b0:	068e7780 	.word	0x068e7780
1a0010b4:	1a002030 	.word	0x1a002030

1a0010b8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0010b8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0010ba:	2069      	movs	r0, #105	; 0x69
1a0010bc:	f000 faa6 	bl	1a00160c <Chip_Clock_GetRate>
1a0010c0:	4b01      	ldr	r3, [pc, #4]	; (1a0010c8 <SystemCoreClockUpdate+0x10>)
1a0010c2:	6018      	str	r0, [r3, #0]
}
1a0010c4:	bd08      	pop	{r3, pc}
1a0010c6:	bf00      	nop
1a0010c8:	100000b8 	.word	0x100000b8

1a0010cc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0010cc:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0010ce:	680b      	ldr	r3, [r1, #0]
1a0010d0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010d4:	d002      	beq.n	1a0010dc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0010d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0010da:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0010dc:	4607      	mov	r7, r0
1a0010de:	2501      	movs	r5, #1
1a0010e0:	e03a      	b.n	1a001158 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0010e2:	694b      	ldr	r3, [r1, #20]
1a0010e4:	fb03 f302 	mul.w	r3, r3, r2
1a0010e8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0010ec:	e01c      	b.n	1a001128 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0010ee:	461c      	mov	r4, r3
	if (val < 0)
1a0010f0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0010f4:	d427      	bmi.n	1a001146 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0010f6:	4567      	cmp	r7, ip
1a0010f8:	d906      	bls.n	1a001108 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0010fa:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0010fc:	1c77      	adds	r7, r6, #1
1a0010fe:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001100:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001102:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001104:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001106:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001108:	3201      	adds	r2, #1
1a00110a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00110e:	dc1d      	bgt.n	1a00114c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001110:	680c      	ldr	r4, [r1, #0]
1a001112:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001116:	d0e4      	beq.n	1a0010e2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001118:	1c73      	adds	r3, r6, #1
1a00111a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00111e:	694b      	ldr	r3, [r1, #20]
1a001120:	fb03 f30c 	mul.w	r3, r3, ip
1a001124:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001128:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001164 <pll_calc_divs+0x98>
1a00112c:	4563      	cmp	r3, ip
1a00112e:	d9eb      	bls.n	1a001108 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001130:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001168 <pll_calc_divs+0x9c>
1a001134:	4563      	cmp	r3, ip
1a001136:	d809      	bhi.n	1a00114c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001138:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00113c:	d1d7      	bne.n	1a0010ee <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00113e:	1c74      	adds	r4, r6, #1
1a001140:	fa23 f404 	lsr.w	r4, r3, r4
1a001144:	e7d4      	b.n	1a0010f0 <pll_calc_divs+0x24>
		return -val;
1a001146:	f1cc 0c00 	rsb	ip, ip, #0
1a00114a:	e7d4      	b.n	1a0010f6 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a00114c:	3601      	adds	r6, #1
1a00114e:	2e03      	cmp	r6, #3
1a001150:	dc01      	bgt.n	1a001156 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001152:	2201      	movs	r2, #1
1a001154:	e7d9      	b.n	1a00110a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001156:	3501      	adds	r5, #1
1a001158:	2d04      	cmp	r5, #4
1a00115a:	dc01      	bgt.n	1a001160 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a00115c:	2600      	movs	r6, #0
1a00115e:	e7f6      	b.n	1a00114e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001160:	bcf0      	pop	{r4, r5, r6, r7}
1a001162:	4770      	bx	lr
1a001164:	094c5eff 	.word	0x094c5eff
1a001168:	1312d000 	.word	0x1312d000

1a00116c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00116c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00116e:	b099      	sub	sp, #100	; 0x64
1a001170:	4605      	mov	r5, r0
1a001172:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001174:	225c      	movs	r2, #92	; 0x5c
1a001176:	2100      	movs	r1, #0
1a001178:	a801      	add	r0, sp, #4
1a00117a:	f000 fefd 	bl	1a001f78 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00117e:	2380      	movs	r3, #128	; 0x80
1a001180:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001182:	6963      	ldr	r3, [r4, #20]
1a001184:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001186:	7923      	ldrb	r3, [r4, #4]
1a001188:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00118c:	4669      	mov	r1, sp
1a00118e:	4628      	mov	r0, r5
1a001190:	f7ff ff9c 	bl	1a0010cc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001194:	9b06      	ldr	r3, [sp, #24]
1a001196:	42ab      	cmp	r3, r5
1a001198:	d027      	beq.n	1a0011ea <pll_get_frac+0x7e>
	if (val < 0)
1a00119a:	1aeb      	subs	r3, r5, r3
1a00119c:	d42e      	bmi.n	1a0011fc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00119e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0011a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0011a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011a6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0011a8:	6963      	ldr	r3, [r4, #20]
1a0011aa:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0011ac:	7923      	ldrb	r3, [r4, #4]
1a0011ae:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0011b2:	a910      	add	r1, sp, #64	; 0x40
1a0011b4:	4628      	mov	r0, r5
1a0011b6:	f7ff ff89 	bl	1a0010cc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0011ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0011bc:	42ab      	cmp	r3, r5
1a0011be:	d01f      	beq.n	1a001200 <pll_get_frac+0x94>
	if (val < 0)
1a0011c0:	1aeb      	subs	r3, r5, r3
1a0011c2:	d425      	bmi.n	1a001210 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0011c4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0011c6:	4b2b      	ldr	r3, [pc, #172]	; (1a001274 <pll_get_frac+0x108>)
1a0011c8:	429d      	cmp	r5, r3
1a0011ca:	d923      	bls.n	1a001214 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0011cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0011ce:	1aed      	subs	r5, r5, r3
1a0011d0:	d433      	bmi.n	1a00123a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0011d2:	42ae      	cmp	r6, r5
1a0011d4:	dc3b      	bgt.n	1a00124e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0011d6:	42be      	cmp	r6, r7
1a0011d8:	dc31      	bgt.n	1a00123e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0011da:	466d      	mov	r5, sp
1a0011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0011e8:	e006      	b.n	1a0011f8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0011ea:	466d      	mov	r5, sp
1a0011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0011f8:	b019      	add	sp, #100	; 0x64
1a0011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0011fc:	425b      	negs	r3, r3
1a0011fe:	e7ce      	b.n	1a00119e <pll_get_frac+0x32>
		*ppll = pll[2];
1a001200:	ad10      	add	r5, sp, #64	; 0x40
1a001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001206:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00120a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00120e:	e7f3      	b.n	1a0011f8 <pll_get_frac+0x8c>
		return -val;
1a001210:	425b      	negs	r3, r3
1a001212:	e7d7      	b.n	1a0011c4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001214:	2340      	movs	r3, #64	; 0x40
1a001216:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001218:	6963      	ldr	r3, [r4, #20]
1a00121a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00121c:	a908      	add	r1, sp, #32
1a00121e:	4628      	mov	r0, r5
1a001220:	f7ff ff54 	bl	1a0010cc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001226:	42ab      	cmp	r3, r5
1a001228:	d1d0      	bne.n	1a0011cc <pll_get_frac+0x60>
			*ppll = pll[1];
1a00122a:	ad08      	add	r5, sp, #32
1a00122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001230:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001238:	e7de      	b.n	1a0011f8 <pll_get_frac+0x8c>
		return -val;
1a00123a:	426d      	negs	r5, r5
1a00123c:	e7c9      	b.n	1a0011d2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00123e:	ad10      	add	r5, sp, #64	; 0x40
1a001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001244:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00124c:	e7d4      	b.n	1a0011f8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00124e:	42af      	cmp	r7, r5
1a001250:	db07      	blt.n	1a001262 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001252:	ad08      	add	r5, sp, #32
1a001254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001258:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00125c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001260:	e7ca      	b.n	1a0011f8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001262:	ad10      	add	r5, sp, #64	; 0x40
1a001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001268:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00126c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001270:	e7c2      	b.n	1a0011f8 <pll_get_frac+0x8c>
1a001272:	bf00      	nop
1a001274:	068e7780 	.word	0x068e7780

1a001278 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001278:	b430      	push	{r4, r5}
1a00127a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00127c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00127e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001280:	e000      	b.n	1a001284 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001282:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001284:	281c      	cmp	r0, #28
1a001286:	d118      	bne.n	1a0012ba <Chip_Clock_FindBaseClock+0x42>
1a001288:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00128c:	0051      	lsls	r1, r2, #1
1a00128e:	4a0c      	ldr	r2, [pc, #48]	; (1a0012c0 <Chip_Clock_FindBaseClock+0x48>)
1a001290:	440a      	add	r2, r1
1a001292:	7914      	ldrb	r4, [r2, #4]
1a001294:	4284      	cmp	r4, r0
1a001296:	d010      	beq.n	1a0012ba <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001298:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00129c:	004a      	lsls	r2, r1, #1
1a00129e:	4908      	ldr	r1, [pc, #32]	; (1a0012c0 <Chip_Clock_FindBaseClock+0x48>)
1a0012a0:	5a8a      	ldrh	r2, [r1, r2]
1a0012a2:	42aa      	cmp	r2, r5
1a0012a4:	d8ed      	bhi.n	1a001282 <Chip_Clock_FindBaseClock+0xa>
1a0012a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0012aa:	0051      	lsls	r1, r2, #1
1a0012ac:	4a04      	ldr	r2, [pc, #16]	; (1a0012c0 <Chip_Clock_FindBaseClock+0x48>)
1a0012ae:	440a      	add	r2, r1
1a0012b0:	8852      	ldrh	r2, [r2, #2]
1a0012b2:	42aa      	cmp	r2, r5
1a0012b4:	d3e5      	bcc.n	1a001282 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0012b6:	4620      	mov	r0, r4
1a0012b8:	e7e4      	b.n	1a001284 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0012ba:	bc30      	pop	{r4, r5}
1a0012bc:	4770      	bx	lr
1a0012be:	bf00      	nop
1a0012c0:	1a002084 	.word	0x1a002084

1a0012c4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0012c4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0012ca:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0012cc:	4a0d      	ldr	r2, [pc, #52]	; (1a001304 <Chip_Clock_EnableCrystal+0x40>)
1a0012ce:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0012d0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0012d4:	6992      	ldr	r2, [r2, #24]
1a0012d6:	428a      	cmp	r2, r1
1a0012d8:	d001      	beq.n	1a0012de <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012da:	4a0a      	ldr	r2, [pc, #40]	; (1a001304 <Chip_Clock_EnableCrystal+0x40>)
1a0012dc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0012de:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0012e2:	4a09      	ldr	r2, [pc, #36]	; (1a001308 <Chip_Clock_EnableCrystal+0x44>)
1a0012e4:	6811      	ldr	r1, [r2, #0]
1a0012e6:	4a09      	ldr	r2, [pc, #36]	; (1a00130c <Chip_Clock_EnableCrystal+0x48>)
1a0012e8:	4291      	cmp	r1, r2
1a0012ea:	d901      	bls.n	1a0012f0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0012ec:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012f0:	4a04      	ldr	r2, [pc, #16]	; (1a001304 <Chip_Clock_EnableCrystal+0x40>)
1a0012f2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0012f4:	9b01      	ldr	r3, [sp, #4]
1a0012f6:	1e5a      	subs	r2, r3, #1
1a0012f8:	9201      	str	r2, [sp, #4]
1a0012fa:	2b00      	cmp	r3, #0
1a0012fc:	d1fa      	bne.n	1a0012f4 <Chip_Clock_EnableCrystal+0x30>
}
1a0012fe:	b002      	add	sp, #8
1a001300:	4770      	bx	lr
1a001302:	bf00      	nop
1a001304:	40050000 	.word	0x40050000
1a001308:	1a00202c 	.word	0x1a00202c
1a00130c:	01312cff 	.word	0x01312cff

1a001310 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001310:	3012      	adds	r0, #18
1a001312:	4b05      	ldr	r3, [pc, #20]	; (1a001328 <Chip_Clock_GetDividerSource+0x18>)
1a001314:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001318:	f010 0f01 	tst.w	r0, #1
1a00131c:	d102      	bne.n	1a001324 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00131e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001322:	4770      	bx	lr
		return CLKINPUT_PD;
1a001324:	2011      	movs	r0, #17
}
1a001326:	4770      	bx	lr
1a001328:	40050000 	.word	0x40050000

1a00132c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00132c:	f100 0212 	add.w	r2, r0, #18
1a001330:	4b03      	ldr	r3, [pc, #12]	; (1a001340 <Chip_Clock_GetDividerDivisor+0x14>)
1a001332:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001336:	4b03      	ldr	r3, [pc, #12]	; (1a001344 <Chip_Clock_GetDividerDivisor+0x18>)
1a001338:	5c18      	ldrb	r0, [r3, r0]
}
1a00133a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00133e:	4770      	bx	lr
1a001340:	40050000 	.word	0x40050000
1a001344:	1a00207c 	.word	0x1a00207c

1a001348 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001348:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00134a:	2810      	cmp	r0, #16
1a00134c:	d80a      	bhi.n	1a001364 <Chip_Clock_GetClockInputHz+0x1c>
1a00134e:	e8df f000 	tbb	[pc, r0]
1a001352:	0b44      	.short	0x0b44
1a001354:	0921180d 	.word	0x0921180d
1a001358:	2d2a2724 	.word	0x2d2a2724
1a00135c:	34300909 	.word	0x34300909
1a001360:	3c38      	.short	0x3c38
1a001362:	40          	.byte	0x40
1a001363:	00          	.byte	0x00
	uint32_t rate = 0;
1a001364:	2000      	movs	r0, #0
1a001366:	e03a      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001368:	481e      	ldr	r0, [pc, #120]	; (1a0013e4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00136a:	e038      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00136c:	4b1e      	ldr	r3, [pc, #120]	; (1a0013e8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00136e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001372:	f003 0307 	and.w	r3, r3, #7
1a001376:	2b04      	cmp	r3, #4
1a001378:	d001      	beq.n	1a00137e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00137a:	481c      	ldr	r0, [pc, #112]	; (1a0013ec <Chip_Clock_GetClockInputHz+0xa4>)
1a00137c:	e02f      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00137e:	2000      	movs	r0, #0
1a001380:	e02d      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001382:	4b19      	ldr	r3, [pc, #100]	; (1a0013e8 <Chip_Clock_GetClockInputHz+0xa0>)
1a001384:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001388:	f003 0307 	and.w	r3, r3, #7
1a00138c:	2b04      	cmp	r3, #4
1a00138e:	d027      	beq.n	1a0013e0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001390:	4816      	ldr	r0, [pc, #88]	; (1a0013ec <Chip_Clock_GetClockInputHz+0xa4>)
1a001392:	e024      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001394:	4b16      	ldr	r3, [pc, #88]	; (1a0013f0 <Chip_Clock_GetClockInputHz+0xa8>)
1a001396:	6818      	ldr	r0, [r3, #0]
		break;
1a001398:	e021      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00139a:	4b16      	ldr	r3, [pc, #88]	; (1a0013f4 <Chip_Clock_GetClockInputHz+0xac>)
1a00139c:	6818      	ldr	r0, [r3, #0]
		break;
1a00139e:	e01e      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0013a0:	4b15      	ldr	r3, [pc, #84]	; (1a0013f8 <Chip_Clock_GetClockInputHz+0xb0>)
1a0013a2:	6818      	ldr	r0, [r3, #0]
		break;
1a0013a4:	e01b      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0013a6:	4b14      	ldr	r3, [pc, #80]	; (1a0013f8 <Chip_Clock_GetClockInputHz+0xb0>)
1a0013a8:	6858      	ldr	r0, [r3, #4]
		break;
1a0013aa:	e018      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0013ac:	f000 f868 	bl	1a001480 <Chip_Clock_GetMainPLLHz>
		break;
1a0013b0:	e015      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0013b2:	2100      	movs	r1, #0
1a0013b4:	f000 f89a 	bl	1a0014ec <Chip_Clock_GetDivRate>
		break;
1a0013b8:	e011      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0013ba:	2101      	movs	r1, #1
1a0013bc:	f000 f896 	bl	1a0014ec <Chip_Clock_GetDivRate>
		break;
1a0013c0:	e00d      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0013c2:	2102      	movs	r1, #2
1a0013c4:	f000 f892 	bl	1a0014ec <Chip_Clock_GetDivRate>
		break;
1a0013c8:	e009      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0013ca:	2103      	movs	r1, #3
1a0013cc:	f000 f88e 	bl	1a0014ec <Chip_Clock_GetDivRate>
		break;
1a0013d0:	e005      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0013d2:	2104      	movs	r1, #4
1a0013d4:	f000 f88a 	bl	1a0014ec <Chip_Clock_GetDivRate>
		break;
1a0013d8:	e001      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0013da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0013de:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0013e0:	4806      	ldr	r0, [pc, #24]	; (1a0013fc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0013e2:	e7fc      	b.n	1a0013de <Chip_Clock_GetClockInputHz+0x96>
1a0013e4:	00b71b00 	.word	0x00b71b00
1a0013e8:	40043000 	.word	0x40043000
1a0013ec:	017d7840 	.word	0x017d7840
1a0013f0:	1a002000 	.word	0x1a002000
1a0013f4:	1a00202c 	.word	0x1a00202c
1a0013f8:	10000068 	.word	0x10000068
1a0013fc:	02faf080 	.word	0x02faf080

1a001400 <Chip_Clock_CalcMainPLLValue>:
{
1a001400:	b538      	push	{r3, r4, r5, lr}
1a001402:	4605      	mov	r5, r0
1a001404:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001406:	7908      	ldrb	r0, [r1, #4]
1a001408:	f7ff ff9e 	bl	1a001348 <Chip_Clock_GetClockInputHz>
1a00140c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00140e:	4b19      	ldr	r3, [pc, #100]	; (1a001474 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001410:	442b      	add	r3, r5
1a001412:	4a19      	ldr	r2, [pc, #100]	; (1a001478 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001414:	4293      	cmp	r3, r2
1a001416:	d821      	bhi.n	1a00145c <Chip_Clock_CalcMainPLLValue+0x5c>
1a001418:	b318      	cbz	r0, 1a001462 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00141a:	2380      	movs	r3, #128	; 0x80
1a00141c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00141e:	2300      	movs	r3, #0
1a001420:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001422:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001424:	fbb5 f3f0 	udiv	r3, r5, r0
1a001428:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00142a:	4a14      	ldr	r2, [pc, #80]	; (1a00147c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00142c:	4295      	cmp	r5, r2
1a00142e:	d903      	bls.n	1a001438 <Chip_Clock_CalcMainPLLValue+0x38>
1a001430:	fb03 f000 	mul.w	r0, r3, r0
1a001434:	42a8      	cmp	r0, r5
1a001436:	d007      	beq.n	1a001448 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001438:	4621      	mov	r1, r4
1a00143a:	4628      	mov	r0, r5
1a00143c:	f7ff fe96 	bl	1a00116c <pll_get_frac>
		if (!ppll->nsel) {
1a001440:	68a3      	ldr	r3, [r4, #8]
1a001442:	b18b      	cbz	r3, 1a001468 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001444:	3b01      	subs	r3, #1
1a001446:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001448:	6923      	ldr	r3, [r4, #16]
1a00144a:	b183      	cbz	r3, 1a00146e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00144c:	68e2      	ldr	r2, [r4, #12]
1a00144e:	b10a      	cbz	r2, 1a001454 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001450:	3a01      	subs	r2, #1
1a001452:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001454:	3b01      	subs	r3, #1
1a001456:	6123      	str	r3, [r4, #16]
	return 0;
1a001458:	2000      	movs	r0, #0
}
1a00145a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00145c:	f04f 30ff 	mov.w	r0, #4294967295
1a001460:	e7fb      	b.n	1a00145a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001462:	f04f 30ff 	mov.w	r0, #4294967295
1a001466:	e7f8      	b.n	1a00145a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001468:	f04f 30ff 	mov.w	r0, #4294967295
1a00146c:	e7f5      	b.n	1a00145a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00146e:	f04f 30ff 	mov.w	r0, #4294967295
1a001472:	e7f2      	b.n	1a00145a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001474:	ff6b3a10 	.word	0xff6b3a10
1a001478:	0b940510 	.word	0x0b940510
1a00147c:	094c5eff 	.word	0x094c5eff

1a001480 <Chip_Clock_GetMainPLLHz>:
{
1a001480:	b530      	push	{r4, r5, lr}
1a001482:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001484:	4d17      	ldr	r5, [pc, #92]	; (1a0014e4 <Chip_Clock_GetMainPLLHz+0x64>)
1a001486:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001488:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00148c:	f7ff ff5c 	bl	1a001348 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001490:	4b15      	ldr	r3, [pc, #84]	; (1a0014e8 <Chip_Clock_GetMainPLLHz+0x68>)
1a001492:	681b      	ldr	r3, [r3, #0]
1a001494:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001496:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001498:	f013 0f01 	tst.w	r3, #1
1a00149c:	d020      	beq.n	1a0014e0 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00149e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0014a2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0014a6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0014aa:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0014ae:	3301      	adds	r3, #1
	n = nsel + 1;
1a0014b0:	3201      	adds	r2, #1
	p = ptab[psel];
1a0014b2:	f10d 0c08 	add.w	ip, sp, #8
1a0014b6:	4461      	add	r1, ip
1a0014b8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0014bc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0014c0:	d108      	bne.n	1a0014d4 <Chip_Clock_GetMainPLLHz+0x54>
1a0014c2:	b93d      	cbnz	r5, 1a0014d4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0014c4:	0049      	lsls	r1, r1, #1
1a0014c6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0014ca:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014ce:	fb00 f003 	mul.w	r0, r0, r3
1a0014d2:	e003      	b.n	1a0014dc <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0014d4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014d8:	fb03 f000 	mul.w	r0, r3, r0
}
1a0014dc:	b003      	add	sp, #12
1a0014de:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0014e0:	2000      	movs	r0, #0
1a0014e2:	e7fb      	b.n	1a0014dc <Chip_Clock_GetMainPLLHz+0x5c>
1a0014e4:	40050000 	.word	0x40050000
1a0014e8:	1a002078 	.word	0x1a002078

1a0014ec <Chip_Clock_GetDivRate>:
{
1a0014ec:	b538      	push	{r3, r4, r5, lr}
1a0014ee:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0014f0:	4608      	mov	r0, r1
1a0014f2:	f7ff ff0d 	bl	1a001310 <Chip_Clock_GetDividerSource>
1a0014f6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0014f8:	4620      	mov	r0, r4
1a0014fa:	f7ff ff17 	bl	1a00132c <Chip_Clock_GetDividerDivisor>
1a0014fe:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001500:	4628      	mov	r0, r5
1a001502:	f7ff ff21 	bl	1a001348 <Chip_Clock_GetClockInputHz>
1a001506:	3401      	adds	r4, #1
}
1a001508:	fbb0 f0f4 	udiv	r0, r0, r4
1a00150c:	bd38      	pop	{r3, r4, r5, pc}
1a00150e:	Address 0x1a00150e is out of bounds.


1a001510 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001510:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001512:	f100 0416 	add.w	r4, r0, #22
1a001516:	00a4      	lsls	r4, r4, #2
1a001518:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00151c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001520:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001522:	281b      	cmp	r0, #27
1a001524:	d813      	bhi.n	1a00154e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001526:	2911      	cmp	r1, #17
1a001528:	d01a      	beq.n	1a001560 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00152a:	4d0e      	ldr	r5, [pc, #56]	; (1a001564 <Chip_Clock_SetBaseClock+0x54>)
1a00152c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00152e:	b10a      	cbz	r2, 1a001534 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001530:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001534:	b10b      	cbz	r3, 1a00153a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001536:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00153a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00153e:	3016      	adds	r0, #22
1a001540:	0080      	lsls	r0, r0, #2
1a001542:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001546:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00154a:	6045      	str	r5, [r0, #4]
1a00154c:	e008      	b.n	1a001560 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00154e:	f044 0401 	orr.w	r4, r4, #1
1a001552:	3016      	adds	r0, #22
1a001554:	0080      	lsls	r0, r0, #2
1a001556:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00155a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00155e:	6044      	str	r4, [r0, #4]
	}
}
1a001560:	bc30      	pop	{r4, r5}
1a001562:	4770      	bx	lr
1a001564:	e0fff7fe 	.word	0xe0fff7fe

1a001568 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001568:	281b      	cmp	r0, #27
1a00156a:	d80c      	bhi.n	1a001586 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00156c:	3016      	adds	r0, #22
1a00156e:	0080      	lsls	r0, r0, #2
1a001570:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001574:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001578:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00157a:	f010 0f01 	tst.w	r0, #1
1a00157e:	d104      	bne.n	1a00158a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001580:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001584:	4770      	bx	lr
		return CLKINPUT_PD;
1a001586:	2011      	movs	r0, #17
1a001588:	4770      	bx	lr
		return CLKINPUT_PD;
1a00158a:	2011      	movs	r0, #17
}
1a00158c:	4770      	bx	lr

1a00158e <Chip_Clock_GetBaseClocktHz>:
{
1a00158e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001590:	f7ff ffea 	bl	1a001568 <Chip_Clock_GetBaseClock>
1a001594:	f7ff fed8 	bl	1a001348 <Chip_Clock_GetClockInputHz>
}
1a001598:	bd08      	pop	{r3, pc}
1a00159a:	Address 0x1a00159a is out of bounds.


1a00159c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00159c:	b971      	cbnz	r1, 1a0015bc <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00159e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0015a0:	b10a      	cbz	r2, 1a0015a6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0015a2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0015a6:	2b02      	cmp	r3, #2
1a0015a8:	d00a      	beq.n	1a0015c0 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0015aa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015ae:	d30a      	bcc.n	1a0015c6 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0015b0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0015b4:	4b06      	ldr	r3, [pc, #24]	; (1a0015d0 <Chip_Clock_EnableOpts+0x34>)
1a0015b6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0015ba:	4770      	bx	lr
		reg |= (1 << 1);
1a0015bc:	2103      	movs	r1, #3
1a0015be:	e7ef      	b.n	1a0015a0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0015c0:	f041 0120 	orr.w	r1, r1, #32
1a0015c4:	e7f1      	b.n	1a0015aa <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0015c6:	3020      	adds	r0, #32
1a0015c8:	4b02      	ldr	r3, [pc, #8]	; (1a0015d4 <Chip_Clock_EnableOpts+0x38>)
1a0015ca:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0015ce:	4770      	bx	lr
1a0015d0:	40052000 	.word	0x40052000
1a0015d4:	40051000 	.word	0x40051000

1a0015d8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0015d8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015dc:	d309      	bcc.n	1a0015f2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0015de:	4a09      	ldr	r2, [pc, #36]	; (1a001604 <Chip_Clock_Enable+0x2c>)
1a0015e0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0015e4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015e8:	f043 0301 	orr.w	r3, r3, #1
1a0015ec:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0015f0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0015f2:	4a05      	ldr	r2, [pc, #20]	; (1a001608 <Chip_Clock_Enable+0x30>)
1a0015f4:	3020      	adds	r0, #32
1a0015f6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015fa:	f043 0301 	orr.w	r3, r3, #1
1a0015fe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001602:	4770      	bx	lr
1a001604:	40052000 	.word	0x40052000
1a001608:	40051000 	.word	0x40051000

1a00160c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00160c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00160e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001612:	d309      	bcc.n	1a001628 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001614:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001618:	4a0d      	ldr	r2, [pc, #52]	; (1a001650 <Chip_Clock_GetRate+0x44>)
1a00161a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00161e:	f014 0f01 	tst.w	r4, #1
1a001622:	d107      	bne.n	1a001634 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001624:	2000      	movs	r0, #0
	}

	return rate;
}
1a001626:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001628:	f100 0320 	add.w	r3, r0, #32
1a00162c:	4a09      	ldr	r2, [pc, #36]	; (1a001654 <Chip_Clock_GetRate+0x48>)
1a00162e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001632:	e7f4      	b.n	1a00161e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001634:	f7ff fe20 	bl	1a001278 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001638:	f7ff ffa9 	bl	1a00158e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00163c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001640:	d103      	bne.n	1a00164a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001642:	2301      	movs	r3, #1
		rate = rate / div;
1a001644:	fbb0 f0f3 	udiv	r0, r0, r3
1a001648:	e7ed      	b.n	1a001626 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00164a:	2302      	movs	r3, #2
1a00164c:	e7fa      	b.n	1a001644 <Chip_Clock_GetRate+0x38>
1a00164e:	bf00      	nop
1a001650:	40052000 	.word	0x40052000
1a001654:	40051000 	.word	0x40051000

1a001658 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001658:	4b09      	ldr	r3, [pc, #36]	; (1a001680 <Chip_UART_GetIndex+0x28>)
1a00165a:	4298      	cmp	r0, r3
1a00165c:	d009      	beq.n	1a001672 <Chip_UART_GetIndex+0x1a>
1a00165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001662:	4298      	cmp	r0, r3
1a001664:	d007      	beq.n	1a001676 <Chip_UART_GetIndex+0x1e>
1a001666:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00166a:	4298      	cmp	r0, r3
1a00166c:	d005      	beq.n	1a00167a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00166e:	2000      	movs	r0, #0
1a001670:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001672:	2002      	movs	r0, #2
1a001674:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001676:	2003      	movs	r0, #3
1a001678:	4770      	bx	lr
			return 1;
1a00167a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00167c:	4770      	bx	lr
1a00167e:	bf00      	nop
1a001680:	400c1000 	.word	0x400c1000

1a001684 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001684:	b530      	push	{r4, r5, lr}
1a001686:	b083      	sub	sp, #12
1a001688:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00168a:	f7ff ffe5 	bl	1a001658 <Chip_UART_GetIndex>
1a00168e:	2301      	movs	r3, #1
1a001690:	461a      	mov	r2, r3
1a001692:	4619      	mov	r1, r3
1a001694:	4d0e      	ldr	r5, [pc, #56]	; (1a0016d0 <Chip_UART_Init+0x4c>)
1a001696:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00169a:	f7ff ff7f 	bl	1a00159c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00169e:	2307      	movs	r3, #7
1a0016a0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0016a2:	2300      	movs	r3, #0
1a0016a4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0016a6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0016a8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0016aa:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0016ac:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0016ae:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0016b0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0016b2:	4b08      	ldr	r3, [pc, #32]	; (1a0016d4 <Chip_UART_Init+0x50>)
1a0016b4:	429c      	cmp	r4, r3
1a0016b6:	d006      	beq.n	1a0016c6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0016b8:	2303      	movs	r3, #3
1a0016ba:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0016bc:	2310      	movs	r3, #16
1a0016be:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0016c0:	9b01      	ldr	r3, [sp, #4]
}
1a0016c2:	b003      	add	sp, #12
1a0016c4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0016c6:	2300      	movs	r3, #0
1a0016c8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0016ca:	69a3      	ldr	r3, [r4, #24]
1a0016cc:	9301      	str	r3, [sp, #4]
1a0016ce:	e7f3      	b.n	1a0016b8 <Chip_UART_Init+0x34>
1a0016d0:	1a0020f8 	.word	0x1a0020f8
1a0016d4:	40082000 	.word	0x40082000

1a0016d8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0016d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0016dc:	b083      	sub	sp, #12
1a0016de:	9001      	str	r0, [sp, #4]
1a0016e0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0016e2:	f7ff ffb9 	bl	1a001658 <Chip_UART_GetIndex>
1a0016e6:	4b32      	ldr	r3, [pc, #200]	; (1a0017b0 <Chip_UART_SetBaudFDR+0xd8>)
1a0016e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0016ec:	f7ff ff8e 	bl	1a00160c <Chip_Clock_GetRate>
1a0016f0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0016f2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0016f6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0016f8:	f04f 0b00 	mov.w	fp, #0
1a0016fc:	46a2      	mov	sl, r4
1a0016fe:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001700:	e02a      	b.n	1a001758 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001702:	4242      	negs	r2, r0
				div ++;
1a001704:	1c4b      	adds	r3, r1, #1
1a001706:	e017      	b.n	1a001738 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001708:	b30a      	cbz	r2, 1a00174e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00170a:	4617      	mov	r7, r2
			sd = d;
1a00170c:	46ab      	mov	fp, r5
			sm = m;
1a00170e:	46a2      	mov	sl, r4
			sdiv = div;
1a001710:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001712:	3501      	adds	r5, #1
1a001714:	42ac      	cmp	r4, r5
1a001716:	d91e      	bls.n	1a001756 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001718:	0933      	lsrs	r3, r6, #4
1a00171a:	0730      	lsls	r0, r6, #28
1a00171c:	fba4 0100 	umull	r0, r1, r4, r0
1a001720:	fb04 1103 	mla	r1, r4, r3, r1
1a001724:	1962      	adds	r2, r4, r5
1a001726:	fb08 f202 	mul.w	r2, r8, r2
1a00172a:	2300      	movs	r3, #0
1a00172c:	f000 fa7e 	bl	1a001c2c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001730:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001732:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001734:	2800      	cmp	r0, #0
1a001736:	dbe4      	blt.n	1a001702 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001738:	4297      	cmp	r7, r2
1a00173a:	d3ea      	bcc.n	1a001712 <Chip_UART_SetBaudFDR+0x3a>
1a00173c:	2b00      	cmp	r3, #0
1a00173e:	d0e8      	beq.n	1a001712 <Chip_UART_SetBaudFDR+0x3a>
1a001740:	0c19      	lsrs	r1, r3, #16
1a001742:	d1e6      	bne.n	1a001712 <Chip_UART_SetBaudFDR+0x3a>
1a001744:	2b02      	cmp	r3, #2
1a001746:	d8df      	bhi.n	1a001708 <Chip_UART_SetBaudFDR+0x30>
1a001748:	2d00      	cmp	r5, #0
1a00174a:	d0dd      	beq.n	1a001708 <Chip_UART_SetBaudFDR+0x30>
1a00174c:	e7e1      	b.n	1a001712 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00174e:	4617      	mov	r7, r2
			sd = d;
1a001750:	46ab      	mov	fp, r5
			sm = m;
1a001752:	46a2      	mov	sl, r4
			sdiv = div;
1a001754:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001756:	3401      	adds	r4, #1
1a001758:	b11f      	cbz	r7, 1a001762 <Chip_UART_SetBaudFDR+0x8a>
1a00175a:	2c0f      	cmp	r4, #15
1a00175c:	d801      	bhi.n	1a001762 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00175e:	2500      	movs	r5, #0
1a001760:	e7d8      	b.n	1a001714 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001762:	f1b9 0f00 	cmp.w	r9, #0
1a001766:	d01e      	beq.n	1a0017a6 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001768:	9a01      	ldr	r2, [sp, #4]
1a00176a:	4611      	mov	r1, r2
1a00176c:	68d3      	ldr	r3, [r2, #12]
1a00176e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001772:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001774:	fa5f f389 	uxtb.w	r3, r9
1a001778:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00177a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00177e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001780:	68d3      	ldr	r3, [r2, #12]
1a001782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001786:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001788:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00178c:	b2db      	uxtb	r3, r3
1a00178e:	f00b 020f 	and.w	r2, fp, #15
1a001792:	4313      	orrs	r3, r2
1a001794:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001796:	0933      	lsrs	r3, r6, #4
1a001798:	fb0a f303 	mul.w	r3, sl, r3
1a00179c:	44da      	add	sl, fp
1a00179e:	fb09 f90a 	mul.w	r9, r9, sl
1a0017a2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0017a6:	4648      	mov	r0, r9
1a0017a8:	b003      	add	sp, #12
1a0017aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0017ae:	bf00      	nop
1a0017b0:	1a0020f0 	.word	0x1a0020f0

1a0017b4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0017b4:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0017b6:	4a0b      	ldr	r2, [pc, #44]	; (1a0017e4 <SystemInit+0x30>)
1a0017b8:	4b0b      	ldr	r3, [pc, #44]	; (1a0017e8 <SystemInit+0x34>)
1a0017ba:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0017bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0017c0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0017c2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0017c6:	2b20      	cmp	r3, #32
1a0017c8:	d004      	beq.n	1a0017d4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0017ca:	f7ff f9ef 	bl	1a000bac <Board_SystemInit>
   Board_Init();
1a0017ce:	f7ff faad 	bl	1a000d2c <Board_Init>
#endif
}
1a0017d2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0017d4:	4a04      	ldr	r2, [pc, #16]	; (1a0017e8 <SystemInit+0x34>)
1a0017d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0017da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0017de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0017e2:	e7f2      	b.n	1a0017ca <SystemInit+0x16>
1a0017e4:	1a000000 	.word	0x1a000000
1a0017e8:	e000ed00 	.word	0xe000ed00

1a0017ec <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0017ec:	4b04      	ldr	r3, [pc, #16]	; (1a001800 <cyclesCounterInit+0x14>)
1a0017ee:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0017f0:	4a04      	ldr	r2, [pc, #16]	; (1a001804 <cyclesCounterInit+0x18>)
1a0017f2:	6813      	ldr	r3, [r2, #0]
1a0017f4:	f043 0301 	orr.w	r3, r3, #1
1a0017f8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0017fa:	2001      	movs	r0, #1
1a0017fc:	4770      	bx	lr
1a0017fe:	bf00      	nop
1a001800:	10000038 	.word	0x10000038
1a001804:	e0001000 	.word	0xe0001000

1a001808 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001808:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00180a:	4d0b      	ldr	r5, [pc, #44]	; (1a001838 <gpioObtainPinInit+0x30>)
1a00180c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001810:	182c      	adds	r4, r5, r0
1a001812:	5628      	ldrsb	r0, [r5, r0]
1a001814:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001816:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00181a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00181c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001820:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001822:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001826:	9b02      	ldr	r3, [sp, #8]
1a001828:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00182a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00182e:	9b03      	ldr	r3, [sp, #12]
1a001830:	701a      	strb	r2, [r3, #0]
}
1a001832:	bc30      	pop	{r4, r5}
1a001834:	4770      	bx	lr
1a001836:	bf00      	nop
1a001838:	1a002100 	.word	0x1a002100

1a00183c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00183c:	f110 0f02 	cmn.w	r0, #2
1a001840:	f000 80c7 	beq.w	1a0019d2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001844:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001848:	f000 80c5 	beq.w	1a0019d6 <gpioInit+0x19a>
{
1a00184c:	b570      	push	{r4, r5, r6, lr}
1a00184e:	b084      	sub	sp, #16
1a001850:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001852:	2300      	movs	r3, #0
1a001854:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001858:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00185c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001860:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001864:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001868:	f10d 030b 	add.w	r3, sp, #11
1a00186c:	9301      	str	r3, [sp, #4]
1a00186e:	ab03      	add	r3, sp, #12
1a001870:	9300      	str	r3, [sp, #0]
1a001872:	f10d 030d 	add.w	r3, sp, #13
1a001876:	f10d 020e 	add.w	r2, sp, #14
1a00187a:	f10d 010f 	add.w	r1, sp, #15
1a00187e:	f7ff ffc3 	bl	1a001808 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001882:	2c05      	cmp	r4, #5
1a001884:	f200 80a9 	bhi.w	1a0019da <gpioInit+0x19e>
1a001888:	e8df f004 	tbb	[pc, r4]
1a00188c:	45278109 	.word	0x45278109
1a001890:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001892:	4853      	ldr	r0, [pc, #332]	; (1a0019e0 <gpioInit+0x1a4>)
1a001894:	f7ff fafe 	bl	1a000e94 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001898:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00189a:	b004      	add	sp, #16
1a00189c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00189e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0018a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0018aa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0018ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018b2:	494c      	ldr	r1, [pc, #304]	; (1a0019e4 <gpioInit+0x1a8>)
1a0018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0018b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018bc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018c0:	2001      	movs	r0, #1
1a0018c2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0018c6:	4c46      	ldr	r4, [pc, #280]	; (1a0019e0 <gpioInit+0x1a4>)
1a0018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0018cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0018d0:	ea22 0201 	bic.w	r2, r2, r1
1a0018d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0018d8:	e7df      	b.n	1a00189a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0018da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0018de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0018e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0018e6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0018ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0018ee:	493d      	ldr	r1, [pc, #244]	; (1a0019e4 <gpioInit+0x1a8>)
1a0018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0018f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018f8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0018fc:	2001      	movs	r0, #1
1a0018fe:	fa00 f102 	lsl.w	r1, r0, r2
1a001902:	4c37      	ldr	r4, [pc, #220]	; (1a0019e0 <gpioInit+0x1a4>)
1a001904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001908:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00190c:	ea22 0201 	bic.w	r2, r2, r1
1a001910:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001914:	e7c1      	b.n	1a00189a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001916:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00191a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00191e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001922:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001926:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00192a:	492e      	ldr	r1, [pc, #184]	; (1a0019e4 <gpioInit+0x1a8>)
1a00192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001930:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001934:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001938:	2001      	movs	r0, #1
1a00193a:	fa00 f102 	lsl.w	r1, r0, r2
1a00193e:	4c28      	ldr	r4, [pc, #160]	; (1a0019e0 <gpioInit+0x1a4>)
1a001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001944:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001948:	ea22 0201 	bic.w	r2, r2, r1
1a00194c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001950:	e7a3      	b.n	1a00189a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001952:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001956:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00195a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00195e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001962:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001966:	491f      	ldr	r1, [pc, #124]	; (1a0019e4 <gpioInit+0x1a8>)
1a001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00196c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001970:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001974:	2001      	movs	r0, #1
1a001976:	fa00 f102 	lsl.w	r1, r0, r2
1a00197a:	4c19      	ldr	r4, [pc, #100]	; (1a0019e0 <gpioInit+0x1a4>)
1a00197c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001980:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001984:	ea22 0201 	bic.w	r2, r2, r1
1a001988:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00198c:	e785      	b.n	1a00189a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00198e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001992:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001996:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00199a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00199e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0019a2:	4910      	ldr	r1, [pc, #64]	; (1a0019e4 <gpioInit+0x1a8>)
1a0019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0019a8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0019ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019b0:	2001      	movs	r0, #1
1a0019b2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0019b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0019e0 <gpioInit+0x1a4>)
1a0019b8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0019bc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0019c0:	4331      	orrs	r1, r6
1a0019c2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0019c6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0019c8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0019cc:	2100      	movs	r1, #0
1a0019ce:	5499      	strb	r1, [r3, r2]
1a0019d0:	e763      	b.n	1a00189a <gpioInit+0x5e>
	  return FALSE;
1a0019d2:	2000      	movs	r0, #0
1a0019d4:	4770      	bx	lr
	  return FALSE;
1a0019d6:	2000      	movs	r0, #0
}
1a0019d8:	4770      	bx	lr
      ret_val = 0;
1a0019da:	2000      	movs	r0, #0
1a0019dc:	e75d      	b.n	1a00189a <gpioInit+0x5e>
1a0019de:	bf00      	nop
1a0019e0:	400f4000 	.word	0x400f4000
1a0019e4:	40086000 	.word	0x40086000

1a0019e8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0019e8:	f110 0f02 	cmn.w	r0, #2
1a0019ec:	d02d      	beq.n	1a001a4a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0019ee:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0019f2:	d02c      	beq.n	1a001a4e <gpioWrite+0x66>
{
1a0019f4:	b510      	push	{r4, lr}
1a0019f6:	b084      	sub	sp, #16
1a0019f8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0019fa:	2300      	movs	r3, #0
1a0019fc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001a00:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a04:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a08:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a0c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a10:	f10d 030b 	add.w	r3, sp, #11
1a001a14:	9301      	str	r3, [sp, #4]
1a001a16:	ab03      	add	r3, sp, #12
1a001a18:	9300      	str	r3, [sp, #0]
1a001a1a:	f10d 030d 	add.w	r3, sp, #13
1a001a1e:	f10d 020e 	add.w	r2, sp, #14
1a001a22:	f10d 010f 	add.w	r1, sp, #15
1a001a26:	f7ff feef 	bl	1a001808 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001a2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a2e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001a32:	1c21      	adds	r1, r4, #0
1a001a34:	bf18      	it	ne
1a001a36:	2101      	movne	r1, #1
1a001a38:	015b      	lsls	r3, r3, #5
1a001a3a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001a3e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001a42:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001a44:	2001      	movs	r0, #1
}
1a001a46:	b004      	add	sp, #16
1a001a48:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001a4a:	2000      	movs	r0, #0
1a001a4c:	4770      	bx	lr
	  return FALSE;
1a001a4e:	2000      	movs	r0, #0
}
1a001a50:	4770      	bx	lr

1a001a52 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a001a52:	f110 0f02 	cmn.w	r0, #2
1a001a56:	d02c      	beq.n	1a001ab2 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001a58:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001a5c:	d02b      	beq.n	1a001ab6 <gpioRead+0x64>
{
1a001a5e:	b500      	push	{lr}
1a001a60:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001a62:	2300      	movs	r3, #0
1a001a64:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001a68:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a6c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a70:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a74:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a78:	f10d 030b 	add.w	r3, sp, #11
1a001a7c:	9301      	str	r3, [sp, #4]
1a001a7e:	ab03      	add	r3, sp, #12
1a001a80:	9300      	str	r3, [sp, #0]
1a001a82:	f10d 030d 	add.w	r3, sp, #13
1a001a86:	f10d 020e 	add.w	r2, sp, #14
1a001a8a:	f10d 010f 	add.w	r1, sp, #15
1a001a8e:	f7ff febb 	bl	1a001808 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001a92:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001a96:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001a9a:	015b      	lsls	r3, r3, #5
1a001a9c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001aa0:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001aa4:	5c98      	ldrb	r0, [r3, r2]
1a001aa6:	3000      	adds	r0, #0
1a001aa8:	bf18      	it	ne
1a001aaa:	2001      	movne	r0, #1

   return ret_val;
}
1a001aac:	b005      	add	sp, #20
1a001aae:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001ab2:	2001      	movs	r0, #1
1a001ab4:	4770      	bx	lr
      return FALSE;
1a001ab6:	2000      	movs	r0, #0
}
1a001ab8:	4770      	bx	lr
1a001aba:	Address 0x1a001aba is out of bounds.


1a001abc <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a001abc:	b130      	cbz	r0, 1a001acc <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a001abe:	4a05      	ldr	r2, [pc, #20]	; (1a001ad4 <tickCallbackSet+0x18>)
1a001ac0:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a001ac2:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a001ac4:	b121      	cbz	r1, 1a001ad0 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a001ac6:	4b04      	ldr	r3, [pc, #16]	; (1a001ad8 <tickCallbackSet+0x1c>)
1a001ac8:	6019      	str	r1, [r3, #0]
1a001aca:	4770      	bx	lr
         retVal = FALSE;
1a001acc:	2000      	movs	r0, #0
1a001ace:	e7f9      	b.n	1a001ac4 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a001ad0:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a001ad2:	4770      	bx	lr
1a001ad4:	10000080 	.word	0x10000080
1a001ad8:	10000070 	.word	0x10000070

1a001adc <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001adc:	b118      	cbz	r0, 1a001ae6 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001ade:	4b04      	ldr	r3, [pc, #16]	; (1a001af0 <tickPowerSet+0x14>)
1a001ae0:	2207      	movs	r2, #7
1a001ae2:	601a      	str	r2, [r3, #0]
1a001ae4:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001ae6:	4b02      	ldr	r3, [pc, #8]	; (1a001af0 <tickPowerSet+0x14>)
1a001ae8:	2200      	movs	r2, #0
1a001aea:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001aec:	4770      	bx	lr
1a001aee:	bf00      	nop
1a001af0:	e000e010 	.word	0xe000e010

1a001af4 <tickInit>:
{
1a001af4:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001af6:	ea50 0401 	orrs.w	r4, r0, r1
1a001afa:	d02a      	beq.n	1a001b52 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001afc:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001b00:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001b04:	2b00      	cmp	r3, #0
1a001b06:	bf08      	it	eq
1a001b08:	2a32      	cmpeq	r2, #50	; 0x32
1a001b0a:	d227      	bcs.n	1a001b5c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001b0c:	4b14      	ldr	r3, [pc, #80]	; (1a001b60 <tickInit+0x6c>)
1a001b0e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001b12:	4b14      	ldr	r3, [pc, #80]	; (1a001b64 <tickInit+0x70>)
1a001b14:	681b      	ldr	r3, [r3, #0]
1a001b16:	fba3 4500 	umull	r4, r5, r3, r0
1a001b1a:	fb03 5501 	mla	r5, r3, r1, r5
1a001b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001b22:	2300      	movs	r3, #0
1a001b24:	4620      	mov	r0, r4
1a001b26:	4629      	mov	r1, r5
1a001b28:	f000 f880 	bl	1a001c2c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001b2c:	3801      	subs	r0, #1
1a001b2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001b32:	d209      	bcs.n	1a001b48 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001b34:	4b0c      	ldr	r3, [pc, #48]	; (1a001b68 <tickInit+0x74>)
1a001b36:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001b38:	4a0c      	ldr	r2, [pc, #48]	; (1a001b6c <tickInit+0x78>)
1a001b3a:	21e0      	movs	r1, #224	; 0xe0
1a001b3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001b40:	2200      	movs	r2, #0
1a001b42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001b44:	2207      	movs	r2, #7
1a001b46:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001b48:	2001      	movs	r0, #1
1a001b4a:	f7ff ffc7 	bl	1a001adc <tickPowerSet>
      bool_t ret_val = 1;
1a001b4e:	2001      	movs	r0, #1
}
1a001b50:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001b52:	2000      	movs	r0, #0
1a001b54:	f7ff ffc2 	bl	1a001adc <tickPowerSet>
         ret_val = 0;
1a001b58:	2000      	movs	r0, #0
1a001b5a:	e7f9      	b.n	1a001b50 <tickInit+0x5c>
            ret_val = 0;
1a001b5c:	2000      	movs	r0, #0
1a001b5e:	e7f7      	b.n	1a001b50 <tickInit+0x5c>
1a001b60:	10000040 	.word	0x10000040
1a001b64:	100000b8 	.word	0x100000b8
1a001b68:	e000e010 	.word	0xe000e010
1a001b6c:	e000ed00 	.word	0xe000ed00

1a001b70 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001b70:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001b72:	4a07      	ldr	r2, [pc, #28]	; (1a001b90 <SysTick_Handler+0x20>)
1a001b74:	6813      	ldr	r3, [r2, #0]
1a001b76:	6851      	ldr	r1, [r2, #4]
1a001b78:	3301      	adds	r3, #1
1a001b7a:	f141 0100 	adc.w	r1, r1, #0
1a001b7e:	6013      	str	r3, [r2, #0]
1a001b80:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001b82:	4b04      	ldr	r3, [pc, #16]	; (1a001b94 <SysTick_Handler+0x24>)
1a001b84:	681b      	ldr	r3, [r3, #0]
1a001b86:	b113      	cbz	r3, 1a001b8e <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001b88:	4a03      	ldr	r2, [pc, #12]	; (1a001b98 <SysTick_Handler+0x28>)
1a001b8a:	6810      	ldr	r0, [r2, #0]
1a001b8c:	4798      	blx	r3
   }
}
1a001b8e:	bd08      	pop	{r3, pc}
1a001b90:	10000078 	.word	0x10000078
1a001b94:	10000080 	.word	0x10000080
1a001b98:	10000070 	.word	0x10000070

1a001b9c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001b9c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001b9e:	4b04      	ldr	r3, [pc, #16]	; (1a001bb0 <USB0_IRQHandler+0x14>)
1a001ba0:	681b      	ldr	r3, [r3, #0]
1a001ba2:	681b      	ldr	r3, [r3, #0]
1a001ba4:	68db      	ldr	r3, [r3, #12]
1a001ba6:	4a03      	ldr	r2, [pc, #12]	; (1a001bb4 <USB0_IRQHandler+0x18>)
1a001ba8:	6810      	ldr	r0, [r2, #0]
1a001baa:	4798      	blx	r3
}
1a001bac:	bd08      	pop	{r3, pc}
1a001bae:	bf00      	nop
1a001bb0:	100000bc 	.word	0x100000bc
1a001bb4:	10000084 	.word	0x10000084

1a001bb8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001bb8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001bba:	f7ff fa7d 	bl	1a0010b8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001bbe:	4b1a      	ldr	r3, [pc, #104]	; (1a001c28 <boardInit+0x70>)
1a001bc0:	6818      	ldr	r0, [r3, #0]
1a001bc2:	f7ff fe13 	bl	1a0017ec <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001bc6:	2001      	movs	r0, #1
1a001bc8:	2100      	movs	r1, #0
1a001bca:	f7ff ff93 	bl	1a001af4 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001bce:	2105      	movs	r1, #5
1a001bd0:	2000      	movs	r0, #0
1a001bd2:	f7ff fe33 	bl	1a00183c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001bd6:	2100      	movs	r1, #0
1a001bd8:	2024      	movs	r0, #36	; 0x24
1a001bda:	f7ff fe2f 	bl	1a00183c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001bde:	2100      	movs	r1, #0
1a001be0:	2025      	movs	r0, #37	; 0x25
1a001be2:	f7ff fe2b 	bl	1a00183c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001be6:	2100      	movs	r1, #0
1a001be8:	2026      	movs	r0, #38	; 0x26
1a001bea:	f7ff fe27 	bl	1a00183c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001bee:	2100      	movs	r1, #0
1a001bf0:	2027      	movs	r0, #39	; 0x27
1a001bf2:	f7ff fe23 	bl	1a00183c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001bf6:	2101      	movs	r1, #1
1a001bf8:	2028      	movs	r0, #40	; 0x28
1a001bfa:	f7ff fe1f 	bl	1a00183c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001bfe:	2101      	movs	r1, #1
1a001c00:	2029      	movs	r0, #41	; 0x29
1a001c02:	f7ff fe1b 	bl	1a00183c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001c06:	2101      	movs	r1, #1
1a001c08:	202a      	movs	r0, #42	; 0x2a
1a001c0a:	f7ff fe17 	bl	1a00183c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001c0e:	2101      	movs	r1, #1
1a001c10:	202b      	movs	r0, #43	; 0x2b
1a001c12:	f7ff fe13 	bl	1a00183c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001c16:	2101      	movs	r1, #1
1a001c18:	202c      	movs	r0, #44	; 0x2c
1a001c1a:	f7ff fe0f 	bl	1a00183c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001c1e:	2101      	movs	r1, #1
1a001c20:	202d      	movs	r0, #45	; 0x2d
1a001c22:	f7ff fe0b 	bl	1a00183c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001c26:	bd08      	pop	{r3, pc}
1a001c28:	100000b8 	.word	0x100000b8

1a001c2c <__aeabi_uldivmod>:
1a001c2c:	b953      	cbnz	r3, 1a001c44 <__aeabi_uldivmod+0x18>
1a001c2e:	b94a      	cbnz	r2, 1a001c44 <__aeabi_uldivmod+0x18>
1a001c30:	2900      	cmp	r1, #0
1a001c32:	bf08      	it	eq
1a001c34:	2800      	cmpeq	r0, #0
1a001c36:	bf1c      	itt	ne
1a001c38:	f04f 31ff 	movne.w	r1, #4294967295
1a001c3c:	f04f 30ff 	movne.w	r0, #4294967295
1a001c40:	f000 b974 	b.w	1a001f2c <__aeabi_idiv0>
1a001c44:	f1ad 0c08 	sub.w	ip, sp, #8
1a001c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001c4c:	f000 f806 	bl	1a001c5c <__udivmoddi4>
1a001c50:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001c58:	b004      	add	sp, #16
1a001c5a:	4770      	bx	lr

1a001c5c <__udivmoddi4>:
1a001c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001c60:	9e08      	ldr	r6, [sp, #32]
1a001c62:	4604      	mov	r4, r0
1a001c64:	4688      	mov	r8, r1
1a001c66:	2b00      	cmp	r3, #0
1a001c68:	f040 8085 	bne.w	1a001d76 <__udivmoddi4+0x11a>
1a001c6c:	428a      	cmp	r2, r1
1a001c6e:	4615      	mov	r5, r2
1a001c70:	d948      	bls.n	1a001d04 <__udivmoddi4+0xa8>
1a001c72:	fab2 f282 	clz	r2, r2
1a001c76:	b14a      	cbz	r2, 1a001c8c <__udivmoddi4+0x30>
1a001c78:	f1c2 0720 	rsb	r7, r2, #32
1a001c7c:	fa01 f302 	lsl.w	r3, r1, r2
1a001c80:	fa20 f707 	lsr.w	r7, r0, r7
1a001c84:	4095      	lsls	r5, r2
1a001c86:	ea47 0803 	orr.w	r8, r7, r3
1a001c8a:	4094      	lsls	r4, r2
1a001c8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c90:	0c23      	lsrs	r3, r4, #16
1a001c92:	fbb8 f7fe 	udiv	r7, r8, lr
1a001c96:	fa1f fc85 	uxth.w	ip, r5
1a001c9a:	fb0e 8817 	mls	r8, lr, r7, r8
1a001c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001ca2:	fb07 f10c 	mul.w	r1, r7, ip
1a001ca6:	4299      	cmp	r1, r3
1a001ca8:	d909      	bls.n	1a001cbe <__udivmoddi4+0x62>
1a001caa:	18eb      	adds	r3, r5, r3
1a001cac:	f107 30ff 	add.w	r0, r7, #4294967295
1a001cb0:	f080 80e3 	bcs.w	1a001e7a <__udivmoddi4+0x21e>
1a001cb4:	4299      	cmp	r1, r3
1a001cb6:	f240 80e0 	bls.w	1a001e7a <__udivmoddi4+0x21e>
1a001cba:	3f02      	subs	r7, #2
1a001cbc:	442b      	add	r3, r5
1a001cbe:	1a5b      	subs	r3, r3, r1
1a001cc0:	b2a4      	uxth	r4, r4
1a001cc2:	fbb3 f0fe 	udiv	r0, r3, lr
1a001cc6:	fb0e 3310 	mls	r3, lr, r0, r3
1a001cca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001cce:	fb00 fc0c 	mul.w	ip, r0, ip
1a001cd2:	45a4      	cmp	ip, r4
1a001cd4:	d909      	bls.n	1a001cea <__udivmoddi4+0x8e>
1a001cd6:	192c      	adds	r4, r5, r4
1a001cd8:	f100 33ff 	add.w	r3, r0, #4294967295
1a001cdc:	f080 80cb 	bcs.w	1a001e76 <__udivmoddi4+0x21a>
1a001ce0:	45a4      	cmp	ip, r4
1a001ce2:	f240 80c8 	bls.w	1a001e76 <__udivmoddi4+0x21a>
1a001ce6:	3802      	subs	r0, #2
1a001ce8:	442c      	add	r4, r5
1a001cea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001cee:	eba4 040c 	sub.w	r4, r4, ip
1a001cf2:	2700      	movs	r7, #0
1a001cf4:	b11e      	cbz	r6, 1a001cfe <__udivmoddi4+0xa2>
1a001cf6:	40d4      	lsrs	r4, r2
1a001cf8:	2300      	movs	r3, #0
1a001cfa:	e9c6 4300 	strd	r4, r3, [r6]
1a001cfe:	4639      	mov	r1, r7
1a001d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d04:	2a00      	cmp	r2, #0
1a001d06:	d053      	beq.n	1a001db0 <__udivmoddi4+0x154>
1a001d08:	fab2 f282 	clz	r2, r2
1a001d0c:	2a00      	cmp	r2, #0
1a001d0e:	f040 80b6 	bne.w	1a001e7e <__udivmoddi4+0x222>
1a001d12:	1b49      	subs	r1, r1, r5
1a001d14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001d18:	fa1f f885 	uxth.w	r8, r5
1a001d1c:	2701      	movs	r7, #1
1a001d1e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001d22:	0c23      	lsrs	r3, r4, #16
1a001d24:	fb0e 111c 	mls	r1, lr, ip, r1
1a001d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001d2c:	fb08 f10c 	mul.w	r1, r8, ip
1a001d30:	4299      	cmp	r1, r3
1a001d32:	d907      	bls.n	1a001d44 <__udivmoddi4+0xe8>
1a001d34:	18eb      	adds	r3, r5, r3
1a001d36:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001d3a:	d202      	bcs.n	1a001d42 <__udivmoddi4+0xe6>
1a001d3c:	4299      	cmp	r1, r3
1a001d3e:	f200 80ec 	bhi.w	1a001f1a <__udivmoddi4+0x2be>
1a001d42:	4684      	mov	ip, r0
1a001d44:	1a59      	subs	r1, r3, r1
1a001d46:	b2a3      	uxth	r3, r4
1a001d48:	fbb1 f0fe 	udiv	r0, r1, lr
1a001d4c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001d50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001d54:	fb08 f800 	mul.w	r8, r8, r0
1a001d58:	45a0      	cmp	r8, r4
1a001d5a:	d907      	bls.n	1a001d6c <__udivmoddi4+0x110>
1a001d5c:	192c      	adds	r4, r5, r4
1a001d5e:	f100 33ff 	add.w	r3, r0, #4294967295
1a001d62:	d202      	bcs.n	1a001d6a <__udivmoddi4+0x10e>
1a001d64:	45a0      	cmp	r8, r4
1a001d66:	f200 80dc 	bhi.w	1a001f22 <__udivmoddi4+0x2c6>
1a001d6a:	4618      	mov	r0, r3
1a001d6c:	eba4 0408 	sub.w	r4, r4, r8
1a001d70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001d74:	e7be      	b.n	1a001cf4 <__udivmoddi4+0x98>
1a001d76:	428b      	cmp	r3, r1
1a001d78:	d908      	bls.n	1a001d8c <__udivmoddi4+0x130>
1a001d7a:	2e00      	cmp	r6, #0
1a001d7c:	d078      	beq.n	1a001e70 <__udivmoddi4+0x214>
1a001d7e:	2700      	movs	r7, #0
1a001d80:	e9c6 0100 	strd	r0, r1, [r6]
1a001d84:	4638      	mov	r0, r7
1a001d86:	4639      	mov	r1, r7
1a001d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d8c:	fab3 f783 	clz	r7, r3
1a001d90:	b97f      	cbnz	r7, 1a001db2 <__udivmoddi4+0x156>
1a001d92:	428b      	cmp	r3, r1
1a001d94:	d302      	bcc.n	1a001d9c <__udivmoddi4+0x140>
1a001d96:	4282      	cmp	r2, r0
1a001d98:	f200 80bd 	bhi.w	1a001f16 <__udivmoddi4+0x2ba>
1a001d9c:	1a84      	subs	r4, r0, r2
1a001d9e:	eb61 0303 	sbc.w	r3, r1, r3
1a001da2:	2001      	movs	r0, #1
1a001da4:	4698      	mov	r8, r3
1a001da6:	2e00      	cmp	r6, #0
1a001da8:	d0a9      	beq.n	1a001cfe <__udivmoddi4+0xa2>
1a001daa:	e9c6 4800 	strd	r4, r8, [r6]
1a001dae:	e7a6      	b.n	1a001cfe <__udivmoddi4+0xa2>
1a001db0:	deff      	udf	#255	; 0xff
1a001db2:	f1c7 0520 	rsb	r5, r7, #32
1a001db6:	40bb      	lsls	r3, r7
1a001db8:	fa22 fc05 	lsr.w	ip, r2, r5
1a001dbc:	ea4c 0c03 	orr.w	ip, ip, r3
1a001dc0:	fa01 f407 	lsl.w	r4, r1, r7
1a001dc4:	fa20 f805 	lsr.w	r8, r0, r5
1a001dc8:	fa21 f305 	lsr.w	r3, r1, r5
1a001dcc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001dd0:	ea48 0404 	orr.w	r4, r8, r4
1a001dd4:	fbb3 f9fe 	udiv	r9, r3, lr
1a001dd8:	0c21      	lsrs	r1, r4, #16
1a001dda:	fb0e 3319 	mls	r3, lr, r9, r3
1a001dde:	fa1f f88c 	uxth.w	r8, ip
1a001de2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001de6:	fb09 fa08 	mul.w	sl, r9, r8
1a001dea:	459a      	cmp	sl, r3
1a001dec:	fa02 f207 	lsl.w	r2, r2, r7
1a001df0:	fa00 f107 	lsl.w	r1, r0, r7
1a001df4:	d90b      	bls.n	1a001e0e <__udivmoddi4+0x1b2>
1a001df6:	eb1c 0303 	adds.w	r3, ip, r3
1a001dfa:	f109 30ff 	add.w	r0, r9, #4294967295
1a001dfe:	f080 8088 	bcs.w	1a001f12 <__udivmoddi4+0x2b6>
1a001e02:	459a      	cmp	sl, r3
1a001e04:	f240 8085 	bls.w	1a001f12 <__udivmoddi4+0x2b6>
1a001e08:	f1a9 0902 	sub.w	r9, r9, #2
1a001e0c:	4463      	add	r3, ip
1a001e0e:	eba3 030a 	sub.w	r3, r3, sl
1a001e12:	b2a4      	uxth	r4, r4
1a001e14:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e18:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e20:	fb00 f808 	mul.w	r8, r0, r8
1a001e24:	45a0      	cmp	r8, r4
1a001e26:	d908      	bls.n	1a001e3a <__udivmoddi4+0x1de>
1a001e28:	eb1c 0404 	adds.w	r4, ip, r4
1a001e2c:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e30:	d26b      	bcs.n	1a001f0a <__udivmoddi4+0x2ae>
1a001e32:	45a0      	cmp	r8, r4
1a001e34:	d969      	bls.n	1a001f0a <__udivmoddi4+0x2ae>
1a001e36:	3802      	subs	r0, #2
1a001e38:	4464      	add	r4, ip
1a001e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001e3e:	eba4 0408 	sub.w	r4, r4, r8
1a001e42:	fba0 8902 	umull	r8, r9, r0, r2
1a001e46:	454c      	cmp	r4, r9
1a001e48:	46c6      	mov	lr, r8
1a001e4a:	464b      	mov	r3, r9
1a001e4c:	d354      	bcc.n	1a001ef8 <__udivmoddi4+0x29c>
1a001e4e:	d051      	beq.n	1a001ef4 <__udivmoddi4+0x298>
1a001e50:	2e00      	cmp	r6, #0
1a001e52:	d069      	beq.n	1a001f28 <__udivmoddi4+0x2cc>
1a001e54:	ebb1 020e 	subs.w	r2, r1, lr
1a001e58:	eb64 0403 	sbc.w	r4, r4, r3
1a001e5c:	fa04 f505 	lsl.w	r5, r4, r5
1a001e60:	fa22 f307 	lsr.w	r3, r2, r7
1a001e64:	40fc      	lsrs	r4, r7
1a001e66:	431d      	orrs	r5, r3
1a001e68:	e9c6 5400 	strd	r5, r4, [r6]
1a001e6c:	2700      	movs	r7, #0
1a001e6e:	e746      	b.n	1a001cfe <__udivmoddi4+0xa2>
1a001e70:	4637      	mov	r7, r6
1a001e72:	4630      	mov	r0, r6
1a001e74:	e743      	b.n	1a001cfe <__udivmoddi4+0xa2>
1a001e76:	4618      	mov	r0, r3
1a001e78:	e737      	b.n	1a001cea <__udivmoddi4+0x8e>
1a001e7a:	4607      	mov	r7, r0
1a001e7c:	e71f      	b.n	1a001cbe <__udivmoddi4+0x62>
1a001e7e:	f1c2 0320 	rsb	r3, r2, #32
1a001e82:	fa20 f703 	lsr.w	r7, r0, r3
1a001e86:	4095      	lsls	r5, r2
1a001e88:	fa01 f002 	lsl.w	r0, r1, r2
1a001e8c:	fa21 f303 	lsr.w	r3, r1, r3
1a001e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e94:	4338      	orrs	r0, r7
1a001e96:	0c01      	lsrs	r1, r0, #16
1a001e98:	fbb3 f7fe 	udiv	r7, r3, lr
1a001e9c:	fa1f f885 	uxth.w	r8, r5
1a001ea0:	fb0e 3317 	mls	r3, lr, r7, r3
1a001ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001ea8:	fb07 f308 	mul.w	r3, r7, r8
1a001eac:	428b      	cmp	r3, r1
1a001eae:	fa04 f402 	lsl.w	r4, r4, r2
1a001eb2:	d907      	bls.n	1a001ec4 <__udivmoddi4+0x268>
1a001eb4:	1869      	adds	r1, r5, r1
1a001eb6:	f107 3cff 	add.w	ip, r7, #4294967295
1a001eba:	d228      	bcs.n	1a001f0e <__udivmoddi4+0x2b2>
1a001ebc:	428b      	cmp	r3, r1
1a001ebe:	d926      	bls.n	1a001f0e <__udivmoddi4+0x2b2>
1a001ec0:	3f02      	subs	r7, #2
1a001ec2:	4429      	add	r1, r5
1a001ec4:	1acb      	subs	r3, r1, r3
1a001ec6:	b281      	uxth	r1, r0
1a001ec8:	fbb3 f0fe 	udiv	r0, r3, lr
1a001ecc:	fb0e 3310 	mls	r3, lr, r0, r3
1a001ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001ed4:	fb00 f308 	mul.w	r3, r0, r8
1a001ed8:	428b      	cmp	r3, r1
1a001eda:	d907      	bls.n	1a001eec <__udivmoddi4+0x290>
1a001edc:	1869      	adds	r1, r5, r1
1a001ede:	f100 3cff 	add.w	ip, r0, #4294967295
1a001ee2:	d210      	bcs.n	1a001f06 <__udivmoddi4+0x2aa>
1a001ee4:	428b      	cmp	r3, r1
1a001ee6:	d90e      	bls.n	1a001f06 <__udivmoddi4+0x2aa>
1a001ee8:	3802      	subs	r0, #2
1a001eea:	4429      	add	r1, r5
1a001eec:	1ac9      	subs	r1, r1, r3
1a001eee:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001ef2:	e714      	b.n	1a001d1e <__udivmoddi4+0xc2>
1a001ef4:	4541      	cmp	r1, r8
1a001ef6:	d2ab      	bcs.n	1a001e50 <__udivmoddi4+0x1f4>
1a001ef8:	ebb8 0e02 	subs.w	lr, r8, r2
1a001efc:	eb69 020c 	sbc.w	r2, r9, ip
1a001f00:	3801      	subs	r0, #1
1a001f02:	4613      	mov	r3, r2
1a001f04:	e7a4      	b.n	1a001e50 <__udivmoddi4+0x1f4>
1a001f06:	4660      	mov	r0, ip
1a001f08:	e7f0      	b.n	1a001eec <__udivmoddi4+0x290>
1a001f0a:	4618      	mov	r0, r3
1a001f0c:	e795      	b.n	1a001e3a <__udivmoddi4+0x1de>
1a001f0e:	4667      	mov	r7, ip
1a001f10:	e7d8      	b.n	1a001ec4 <__udivmoddi4+0x268>
1a001f12:	4681      	mov	r9, r0
1a001f14:	e77b      	b.n	1a001e0e <__udivmoddi4+0x1b2>
1a001f16:	4638      	mov	r0, r7
1a001f18:	e745      	b.n	1a001da6 <__udivmoddi4+0x14a>
1a001f1a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001f1e:	442b      	add	r3, r5
1a001f20:	e710      	b.n	1a001d44 <__udivmoddi4+0xe8>
1a001f22:	3802      	subs	r0, #2
1a001f24:	442c      	add	r4, r5
1a001f26:	e721      	b.n	1a001d6c <__udivmoddi4+0x110>
1a001f28:	4637      	mov	r7, r6
1a001f2a:	e6e8      	b.n	1a001cfe <__udivmoddi4+0xa2>

1a001f2c <__aeabi_idiv0>:
1a001f2c:	4770      	bx	lr
1a001f2e:	bf00      	nop

1a001f30 <__libc_init_array>:
1a001f30:	b570      	push	{r4, r5, r6, lr}
1a001f32:	4d0d      	ldr	r5, [pc, #52]	; (1a001f68 <__libc_init_array+0x38>)
1a001f34:	4c0d      	ldr	r4, [pc, #52]	; (1a001f6c <__libc_init_array+0x3c>)
1a001f36:	1b64      	subs	r4, r4, r5
1a001f38:	10a4      	asrs	r4, r4, #2
1a001f3a:	2600      	movs	r6, #0
1a001f3c:	42a6      	cmp	r6, r4
1a001f3e:	d109      	bne.n	1a001f54 <__libc_init_array+0x24>
1a001f40:	4d0b      	ldr	r5, [pc, #44]	; (1a001f70 <__libc_init_array+0x40>)
1a001f42:	4c0c      	ldr	r4, [pc, #48]	; (1a001f74 <__libc_init_array+0x44>)
1a001f44:	f7fe fddf 	bl	1a000b06 <_init>
1a001f48:	1b64      	subs	r4, r4, r5
1a001f4a:	10a4      	asrs	r4, r4, #2
1a001f4c:	2600      	movs	r6, #0
1a001f4e:	42a6      	cmp	r6, r4
1a001f50:	d105      	bne.n	1a001f5e <__libc_init_array+0x2e>
1a001f52:	bd70      	pop	{r4, r5, r6, pc}
1a001f54:	f855 3b04 	ldr.w	r3, [r5], #4
1a001f58:	4798      	blx	r3
1a001f5a:	3601      	adds	r6, #1
1a001f5c:	e7ee      	b.n	1a001f3c <__libc_init_array+0xc>
1a001f5e:	f855 3b04 	ldr.w	r3, [r5], #4
1a001f62:	4798      	blx	r3
1a001f64:	3601      	adds	r6, #1
1a001f66:	e7f2      	b.n	1a001f4e <__libc_init_array+0x1e>
1a001f68:	1a0021e8 	.word	0x1a0021e8
1a001f6c:	1a0021e8 	.word	0x1a0021e8
1a001f70:	1a0021e8 	.word	0x1a0021e8
1a001f74:	1a0021ec 	.word	0x1a0021ec

1a001f78 <memset>:
1a001f78:	4402      	add	r2, r0
1a001f7a:	4603      	mov	r3, r0
1a001f7c:	4293      	cmp	r3, r2
1a001f7e:	d100      	bne.n	1a001f82 <memset+0xa>
1a001f80:	4770      	bx	lr
1a001f82:	f803 1b01 	strb.w	r1, [r3], #1
1a001f86:	e7f9      	b.n	1a001f7c <memset+0x4>

1a001f88 <InitClkStates>:
1a001f88:	0f01 0101                                   ....

1a001f8c <pinmuxing>:
1a001f8c:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001f9c:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001fac:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001fbc:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001fcc:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001fdc:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001fec:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001ffc:	0206 0057                                   ..W.

1a002000 <ExtRateIn>:
1a002000:	0000 0000                                   ....

1a002004 <GpioButtons>:
1a002004:	0400 0800 0900 0901                         ........

1a00200c <GpioLeds>:
1a00200c:	0005 0105 0205 0e00 0b01 0c01               ............

1a002018 <GpioPorts>:
1a002018:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a002028:	0802 ffff                                   ....

1a00202c <OscRateIn>:
1a00202c:	1b00 00b7                                   ....

1a002030 <InitClkStates>:
1a002030:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a002040:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a002050:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a002060:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a002070:	111a 0001 111b 0001 0201 0804 0f03 0f0f     ................
1a002080:	00ff 0000                                   ....

1a002084 <periph_to_base>:
1a002084:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002094:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0020a4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0020b4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0020c4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0020d4:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0020e4:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0020f0 <UART_BClock>:
1a0020f0:	01c2 01a2 0182 0162                         ......b.

1a0020f8 <UART_PClock>:
1a0020f8:	0081 0082 00a1 00a2                         ........

1a002100 <gpioPinsInit>:
1a002100:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a002110:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a002120:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a002130:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a002140:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a002150:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002160:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002170:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002180:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002190:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a0021a0:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a0021b0:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a0021c0:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a0021d0:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a0021e0:	020b 000c 0c01 ffff                         ........
